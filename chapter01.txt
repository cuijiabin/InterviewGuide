第1章  栈和队列
1.设计一个有getMin功能的栈（士 ★☆☆☆）
2.由两个栈组成的队列（尉 ★★☆☆）
3.如何仅用递归函数和栈操作逆序一个栈（尉 ★★☆☆）
4.猫狗队列（士 ★☆☆☆）
5.用一个栈实现另一个栈的排序（士 ★☆☆☆）
6.用栈来求解汉诺塔问题（校 ★★★☆）
7.生成窗口最大值数组（尉 ★★☆☆）
8.构造数组的MaxTree（校 ★★★☆）
9.求最大子矩阵的大小（校 ★★★☆）
10.最大值减去最小值小于或等于num的子数组数量（校 ★★★☆）

==========================================
设计一个有getMin功能的栈
【题目】
实现一个特殊的栈，在实现栈的基本功能的基础上，再实现返回栈中最小元素的操作。
【要求】
1.pop。push、getMin操作的时间复杂度都是O(1)。
2.设计的栈类型可以使用现成的栈结构。
【解答】
在设计上我们使用两个栈，一个栈用来保存当前栈中的元素，其功能和一个正常的栈没有区别，这个栈记为stackData；另一个栈用于保存每一步的最小值，这个栈记为stackMin。具体的实现方式有两种。

==========================================
由两个栈组成的队列
【题目】
编写一个类，用两个栈实现队列，支持队列的基本操作(add、poll、peek)。
【解答】
栈的特点是先进后出，而队列的特点是先进先出。我们用两个栈正好能把顺序反过来实现类似队列的操作。

==========================================
如何仅用递归函数和栈操作逆序一个栈
【题目】
一个栈依次压入1、2、3、4、5，那么从栈顶到栈底分别为5、4、3、2、1。将这个栈转置后，从栈顶到栈底为1、2、3、4、5，也就是实现栈中元素的逆序，但是只能用递归函数来实现，不能用其他数据结构。
【解答】
本题考查栈的操作和递归函数的设计，我们需要设计出两个递归函数。
递归函数一：将栈stack的栈底元素返回并移除。
递归函数二：逆序一个栈，就是题目要求实现的方法，具体过程就是如下代码中的reverse方法。

==========================================
猫狗队列
【题目】
宠物、狗和猫的类如下：

实现一种狗猫队列的结构，要求如下：
1.用户可以调用add方法将cat类或dog类的实例放入队列中；
2.用户可以调用pollAll方法，将队列中所有的实例按照进队列的先后顺序依次弹出；
3.用户可以调用pollDog方法，将队列中dog类的实例按照进队列的先后顺序依次弹出；
4.用户可以调用pollCat方法，将队列中cat类的实例按照进队列的先后顺序依次弹出；
5.用户可以调用isEmpty方法，检查队列中是否还有dog或cat的实例；
6.用户可以调用isDogEmpty方法，检查队列中是否有dog类的实例；
7.用户可以调用isCatEmpty方法，检查队列中是否有cat类的实例。

【解答】
本题考查实现特殊数据结构的能力以及针对特殊功能的算法设计能力。
本题为开放类型的面试题，希望读者能有自己的实现，在这里列出几种常见的设计错误：

==========================================
用一个栈实现另一个栈的排序
【题目】
一个栈中元素的类型为整型，现在想将该栈从顶到底按从大到小的顺序排序，只许申请一个栈。除此之外，可以申请新的变量，但不能申请额外的数据结构。如何完成排序？

【解答】
将要排序的栈记为stack，申请的辅助栈记为help。在stack上执行pop操作，弹出的元素记为cur。
1.如果cur小于或等于help的栈顶元素，则将cur直接压入help;
2.如果cur大于help的栈顶元素，则将help的元素逐一弹出，逐一压入stack，直到cur小于或等于help的栈顶元素，再将cur压入help。

一直执行以上操作，直到stack中的全部元素都压入到help。最后将help中的所有元素逐一压入stack，即完成排序。
==========================================
