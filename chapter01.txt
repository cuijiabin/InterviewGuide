第1章  栈和队列

1.设计一个有getMin功能的栈（士 ★☆☆☆）
2.由两个栈组成的队列（尉 ★★☆☆）
3.如何仅用递归函数和栈操作逆序一个栈（尉 ★★☆☆）
4.猫狗队列（士 ★☆☆☆）
5.用一个栈实现另一个栈的排序（士 ★☆☆☆）
6.用栈来求解汉诺塔问题（校 ★★★☆）
7.生成窗口最大值数组（尉 ★★☆☆）
8.构造数组的MaxTree（校 ★★★☆）
9.求最大子矩阵的大小（校 ★★★☆）
10.最大值减去最小值小于或等于num的子数组数量（校 ★★★☆）

1.==========================================
设计一个有getMin功能的栈
【题目】
实现一个特殊的栈，在实现栈的基本功能的基础上，再实现返回栈中最小元素的操作。
【要求】
1.pop。push、getMin操作的时间复杂度都是O(1)。
2.设计的栈类型可以使用现成的栈结构。
【解答】
在设计上我们使用两个栈，一个栈用来保存当前栈中的元素，其功能和一个正常的栈没有区别，
这个栈记为stackData；另一个栈用于保存每一步的最小值，这个栈记为stackMin。具体的实现方式有两种。

【代码实现】

#python3.5
class NewStack1:
    def __init__(self):
        self.stackData = []
        self.stackMin = []

    def push(self, newNum):
        self.stackData.append(newNum)
        if len(self.stackMin) == 0 or newNum <= self.getMin():
            self.stackMin.append(newNum)

    def pop(self):
        if len(self.stackData) == 0:
            raise Exception("stack is empty!")
        value = self.stackData.pop()
        if self.getMin() == value:
            self.stackMin.pop()
        return value

    def getMin(self):
        if len(self.stackMin) == 0:
            raise Exception("stack is empty!")
        return self.stackMin[-1]

class NewStack2:
    def __init__(self):
        self.stackData = []
        self.stackMin = []

    def push(self, newNum):
        self.stackData.append(newNum)
        if len(self.stackMin) == 0 or newNum < self.getMin():
            self.stackMin.append(newNum)
        else:
            self.stackMin.append(self.getMin())

    def pop(self):
        if len(self.stackData) == 0:
            raise Exception("Stack is empty!")
        self.stackMin.pop()
        return self.stackData.pop()

    def getMin(self):
        if len(self.stackMin) == 0:
            raise Exception("Stack is empty!")
        return self.stackMin[-1]

2.==========================================
由两个栈组成的队列
【题目】
编写一个类，用两个栈实现队列，支持队列的基本操作(add、poll、peek)。
【解答】
栈的特点是先进后出，而队列的特点是先进先出。我们用两个栈正好能把顺序反过来实现类似队列的操作。
【代码实现】

#python3.5
class TwoStackQueue:
    stackPush = []
    stackPop = []

    def add(self, newNum):
        self.stackPush.append(newNum)

    def poll(self):
        if not self.stackPush and not self.stackPop:
            raise Exception("Queue is empty!")
        elif not self.stackPop:
            while self.stackPush:
                self.stackPop.append(self.stackPush.pop())
        return self.stackPop.pop()

    def peek(self):
        if not self.stackPush and not self.stackPop:
            raise Exception("Queue is empty!")
        elif not self.stackPop:
            while self.stackPush:
                self.stackPop.append(self.stackPush.pop())
        return self.stackPop[-1]
3.==========================================
如何仅用递归函数和栈操作逆序一个栈
【题目】
一个栈依次压入1、2、3、4、5，那么从栈顶到栈底分别为5、4、3、2、1。将这个栈转置后，
从栈顶到栈底为1、2、3、4、5，也就是实现栈中元素的逆序，但是只能用递归函数来实现，
不能用其他数据结构。
【解答】
本题考查栈的操作和递归函数的设计，我们需要设计出两个递归函数。
递归函数一：将栈stack的栈底元素返回并移除。
递归函数二：逆序一个栈，就是题目要求实现的方法，具体过程就是如下代码中的reverse方法。
【代码实现】

#python3.5
def getAndRemoveLast(stack):
    result = stack.pop()
    if len(stack) == 0:
        return result
    else:
        i = getAndRemoveLast(stack)
        stack.append(result)
        return i

def reverse(stack):
    if len(stack) == 0:
        return
    i = getAndRemoveLast(stack)
    reverse(stack)
    stack.append(i)
    return stack
4.==========================================
猫狗队列
【题目】
宠物、狗和猫的类如下：

实现一种狗猫队列的结构，要求如下：
1.用户可以调用add方法将cat类或dog类的实例放入队列中；
2.用户可以调用pollAll方法，将队列中所有的实例按照进队列的先后顺序依次弹出；
3.用户可以调用pollDog方法，将队列中dog类的实例按照进队列的先后顺序依次弹出；
4.用户可以调用pollCat方法，将队列中cat类的实例按照进队列的先后顺序依次弹出；
5.用户可以调用isEmpty方法，检查队列中是否还有dog或cat的实例；
6.用户可以调用isDogEmpty方法，检查队列中是否有dog类的实例；
7.用户可以调用isCatEmpty方法，检查队列中是否有cat类的实例。

【解答】
本题考查实现特殊数据结构的能力以及针对特殊功能的算法设计能力。
本题为开放类型的面试题，希望读者能有自己的实现，在这里列出几种常见的设计错误：

5.==========================================
用一个栈实现另一个栈的排序
【题目】
一个栈中元素的类型为整型，现在想将该栈从顶到底按从大到小的顺序排序，只许申请一个栈。
除此之外，可以申请新的变量，但不能申请额外的数据结构。如何完成排序？

【解答】
将要排序的栈记为stack，申请的辅助栈记为help。在stack上执行pop操作，弹出的元素记为cur。
1.如果cur小于或等于help的栈顶元素，则将cur直接压入help;
2.如果cur大于help的栈顶元素，则将help的元素逐一弹出，逐一压入stack，直到cur
小于或等于help的栈顶元素，再将cur压入help。

一直执行以上操作，直到stack中的全部元素都压入到help。最后将help中的所有元素逐一
压入stack，即完成排序。
【代码实现】

#python3.5
def sortByStack(stack):
    if len(stack) < 2:
        return stack
    stack1 = []
    while stack:
        cur = stack.pop()
        while len(stack1) != 0 and stack1[-1] < cur:
            stack.push(stack1.pop())
        stack1.push(cur)
    while stack1:
        stack.append(stack1.pop())
    return stack
==========================================

6. TODO


7.==========================================
生成窗口最大值数组
【题目】
有一个整型数组arr和一个大小为w的窗口从数组的最左边滑到最右边，窗口每次向右滑动一个位置。 
例如，数组为[4,3,5,4,3,3,6,7]，窗口大小为3时：依次出现的窗口为[4,3,5], [3,5,4], [5,4,3], 
[4,3,3], [3,3,6], [3,6,7]。
如果数组长度是n，窗口大小是w，则一共产生n-w+1个窗口。 
　　 
请实现一个函数。
1、输入：整型数组arr，窗口大小w 
2、输出：一个长度大小为n-w+1的数组res，res[i]表示每一种窗口下的最大值。例如上面的例子，
应该返回[5,5,5,4,6,7]。

【基本思路】

使用双端队列，遍历一遍数组，假设遍历到的位置是 i，如果队列为空或者队尾所对应的元素大于arr[i]，
将位置 i 压入队列；
否则将队尾元素弹出，再将 i 压入队列。此时，判断队头元素是否等于i - w，
如果是的话说明此时队头已经不在当前窗口的范围内，删去。
这样，这个队列就成了一个维护窗口为w的子数组的最大值更新的结构，队头元素就是每个窗口的最大值。

【代码实现】

#python3.5
def getMaxWindow(arr, w):
    if arr == None or w < 1 or len(arr) < w:
        return
    deque = []
    res = []
    for i in range(len(arr)):
        while deque and arr[deque[-1]] <= arr[i]:
            deque.pop()
        deque.append(i)
        if deque[0] <= i - w:
            deque.pop(0)
        if i-w+1 >= 0:
            res.append(arr[deque[0]])
    return res

==========================================

8.==========================================
构造数组的MaxTree
【题目】
定义二叉树节点如下：

class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

一个数组的MaxTree定义如下： 
1、数组中必须没有重复元素 
2、MaxTree是一棵二叉树，数组的每一个值对应一个二叉树的节点 
3、包括MaxTree树在内且在其中的每一棵子树上，值最大的节点就是树的头。 
给定一个没有重复元素的数组arr，写出生成这个数组的MaxTree的函数，要求如果数组长度为N，则时间
复杂度为O(N)、额外空间复杂度为O(N)。

【基本思路】
使用以下原则建立这棵树： 
1、每一个数的父节点是它左边第一个比它大的数和它右边第一个比它大的数中，较小的一个。 
2、如果一个数左边没有比它大的数，右边也没有，那么这个数就是整个数组中的最大值，那么这个数是MaxTree的头节点。

接下来的只要知道每一个数左边比它大的数以及右边比它大的数，剩下的工作就很好实现了。如何实现呢？使用栈。 
　　 
从左到右遍历数组arr，假设遍历到的位置为i，如果栈为空或者栈顶元素大于arr[i]，直接将arr[i]压入栈中；
否则将栈中小于arr[i]的元素全部出栈，然后压入arr[i]。
同时，栈中元素的左边第一个比它大的数就是它相邻的数，右边第一个比它大的数就是使它出栈的数，
如果没有数使它出栈，说明它右边没有比它大的数。

以[3,1,2]为例，首先3入栈，接下来1比3小，直接入栈，并且确定了1左边第一个比它大的数是3；
接下来2比1大，1出栈，同时可以确定1右边第一个比它大的数是2；
接下来2比3小，2入栈，并且确定了2左边第一个比它大的数是3。
此时栈中的元素为[3,2]，没有数使它们出栈，所以3和2右边都没有比它大的数。
【代码实现】

#python3.5
class Node:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def getMaxTree(arr):
    nArr = [Node(arr[i]) for i in range(len(arr))]
    lBigMap = {}
    rBigMap = {}
    stack = []
    for i in range(len(nArr)):
        curNode = nArr[i]
        while stack and stack[-1].value < curNode.value:
            cur = stack.pop()
            lBigMap[cur] = stack[-1] if stack else None
            rBigMap[cur] = curNode
        stack.append(curNode)
    while stack:
        cur = stack.pop()
        lBigMap[cur] = stack[-1] if stack else None
        rBigMap[cur] = None
    head = None
    for i in range(len(nArr)):
        curNode = nArr[i]
        left = lBigMap[curNode]
        right = rBigMap[curNode]
        if left == None and right == None:
            head = curNode
        elif left == None:
            if right.left == None:
                right.left = curNode
            else:
                right.right = curNode
        elif right == None:
            if left.left == None:
                left.left = curNode
            else:
                left.right = curNode
        else:
            parent = left if left.value < right.value else right
            if parent.left == None:
                parent.left = curNode
            else:
                parent.right = curNode
    return head
==========================================

9.==========================================
求最大子矩阵的大小
【题目】
给定一个整型矩阵map，其中的值只有0和1两种，求其中全是1的所有矩形区域中，最大的矩形区域为1的数量。 
　　例如： 
　　1　0　1　1 
　　1　1　1　1 
　　1　1　1　0 
其中，最大的矩形区域有6个1，所以返回6.

【题目】
如果矩阵的大小是O(N*M)，本题可以做到时间复杂度为O(N*M)。 
1、矩阵的行数是N，以每一行做切割，统计以当前行作为底的情况下，每个位置往上连续1的数量。使用高度
数组height来表示。 
　　例如： 
　　map = 1　0　1　1 
　　　 　　1　1　1　1 
　　　　 　1　1　1　0 
以第一行做切割后，height = {1, 0, 1, 1}. 
以第二行做切割后，height = {2, 1, 2, 2}. 
以第三行做切割后，height = {3, 2, 3, 0}.

2、对于height数组，我们可以将其想象成一个直方图，要求最大的子矩阵，实际上就是对以每一行为底的
直方图，其最大矩阵面积。
如果我们能求出以每一个柱子扩展出去的最大矩形，那么其中最大的矩形就是我们想要的。

如果要求一个柱子a扩展出去的最大矩形，实际上就是求这个柱子左边第一个比它低的柱子b以及右边第一个
比它低的柱子c，
那么b和c之间的柱子数×a柱子的高度，就是答案。问题的关键就在于如何快速的找到柱子b和c。方法如下： 
　　 
使用一个栈，从左到右遍历数组height，假设遍历到的位置为i，
如果栈为空或者栈顶所对应的元素小于height[i]，
直接将 i 压入栈中；否则将栈中大于height[i]的元素全部出栈，然后压入 i。
对于栈中的每一个元素，左边第一个比它小的数的位置就是栈中上一个元素，
右边第一个比它小（或者等于）的数的位置就是使它出栈的数的位置，
如果没有数使它出栈，说明它右边没有比它小的数。

以[1,3,2]为例，首先1入栈，接下来3比1大，直接入栈，并且确定了3左边第一个比它小的数是1；
接下来2比3小，3出栈，同时可以确定3右边第一个比它小的数是2；接下来2比1大，2入栈，
并且确定了2左边第一个比它小的数是1。此时栈中的元素为[1,2]，
没有数使它们出栈，所以3和2右边都没有比它小的数。
【代码实现】

#python3.5
def maxRecSize(map):
    def maxRecFromBottom(height):
        if height == None or len(height) == 0:
            return 0
        stack = []
        maxArea = 0
        for i in range(len(height)):
            while stack and height[stack[-1]] >= height[i]:
                j = stack.pop()
                k = stack[-1] if stack else -1
                maxArea = max(maxArea, (i-k-1) * height[j])
            stack.append(i)
        while stack:
            j = stack.pop()
            k = stack[-1] if stack else -1
            maxArea = max(maxArea, (len(height)-k-1) * height[j])
        return maxArea

    if map == None or len(map) == 0 or len(map[0]) == 0:
        return 0
    height = [0 for i in range(len(map[0]))]
    maxArea = 0
    for i in range(len(map)):
        for j in range(len(map[0])):
            height[j] = 0 if map[i][j] == 0 else height[j] + 1
        maxArea = max(maxArea, maxRecFromBottom(height))
    return maxArea
==========================================

10.==========================================
最大值减去最小值小于或等于num的子数组数量
【题目】
给定数组arr和整数num，共返回有多少个子数组满足如下情况：子数组中的最大值减去最小值小于或等于num。 
要求，时间复杂度O(N)。

【基本思路】

首先明确两点： 
　　 
1、如果子数组arr[i…j]满足条件，那么arr[i…j]中的子数组一定也满足条件。 
2、如果子数组arr[i…j]不满足条件，那么包含arr[i…j]的子数组一定也不满足条件。

使用两个双端队列qmin和qmax，qmin用来维护子数组arr[i…j]的最小值更新，qmax用来维护子数组arr[i…j]的
最大值更新。
队头表示的就是子数组arr[i…j]的最小（大）值。生成两个整型变量i和j，
用于表示子数组的范围，即arr[i…j]。整型变量res表示所有满足条件的子数组数量。
初始时，i、j、res都为0。

令j不断向右移动，表示arr[i…j]一直向右扩张，并不断更新qmin和qmax。
一旦出现arr[i…j]不满足条件的情况，扩张停止，
此时arr[i…j-1]、arr[i…j-2]、arr[i…j-3]……arr[i…i]一定满足条件。
即所有必须以arr[i]开头的满足条件的子数组数量为j - i。
所以令 res += j - i。

向右扩张停止后，令i向右移动一个单位，表示开始考虑以arr[i+1]开头的满足条件的子数组数量，
更新qmin、qmax。接下来的过程和上述一样。

qmin和qmax如何更新，可以参照我的另一篇博客：7.生成窗口最大值数组

【代码实现】

#python3.5
def getNum(arr, num):
    if arr == None or len(arr) == 0:
        return 0
    qmin = []
    qmax = []
    i = 0
    j = 0
    res = 0
    while i < len(arr):
        while j < len(arr):
            while qmin and arr[qmin[-1]] > arr[j]:
                qmin.pop()
            qmin.append(j)
            while qmax and arr[qmax[-1]] < arr[j]:
                qmax.pop()
            qmax.append(j)
            if arr[qmax[0]] - arr[qmin[0]] > num:
                break
            j += 1
        if qmin[0] == i:
            qmin.pop(0)
        if qmax[0] == i:
            qmax.pop(0)
        res += j - i
        i += 1
    return res
==========================================