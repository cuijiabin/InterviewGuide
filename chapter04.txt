第4章  递归和动态规划
斐波那契系列问题的递归，动态规划与矩阵乘法
矩阵的最小路径和
换钱的最少货币数（每种货币有无数张）
换钱的最少货币数（每种货币只有一张）
换钱的方法数
最长递增子序列问题
汉诺塔问题
最长公共子序列问题
最长公共子串问题
最小编辑代价
字符串的交错组成
龙与地下城游戏问题
数字字符串转换为字母组合的种数
排成一条线的纸牌博弈问题
跳跃游戏
数组中的最长连续序列
N皇后问题的递归方法和位运算方法

递归与动态规划---斐波那契系列问题的递归，动态规划与矩阵乘法
2017年08月11日 23:55:43
阅读数：230
【题目】

给定整数Ｎ，返回斐波那契数列的第Ｎ项
假设农场中成熟的母牛每年只会生一头小母牛，并且永远不会死。第一年农场有１只成熟的牛，从第二年开始，母牛开始生小母牛。每只小母牛３年之后 成熟又可以生小母牛。给定整数Ｎ，返回Ｎ年后牛的数量。
【基本思路】 
　　原问题。O(2^N)的方法。斐波那契数列为１，１，２，３，５，８……，也就是除第一项和第二项以外，对于第N项，有F(N) = F(N-1) + f(N-2)，于是可以很轻松的写出暴力递归的代码。下面是使用python3.5实现的代码： 
　　

递归。时间复杂度(2^N)
def fibonacci1(n):
    if n < 1:
        return 0
    if n == 1 or n == 2:
        return 1
    return fibonacci1(n-1) + fibonacci1(n-2)

　　O(N)的方法。斐波那契可以从左到右依次求出每一项的值，那么可以顺序计算求到第N项即可。下面是使用python3.5实现的代码：

递归。时间复杂度(2^N)
def fibonacci2(n):
    if n < 1:
        return 0
    if n == 1 or n == 2:
        return 1
    pre = 1
    cur = 1
    for i in range(3, n+1):
        tmp = cur
        cur = pre + cur
        pre = tmp
    return cur

　　O(logN)的方法。矩阵乘法推导如下（字丑见谅） 
　 　　　　这里写图片描述

　　所以现在的问题就变成了如何使用最快的方法求一个矩阵的N次方，而求一个矩阵的N次方明显可以在O(logN)时间内完成。为了表述方便，现在使用一个整数N次方的例子来说明，矩阵的求解过程类似。 
　　假设一个整数是10，如何快速的求解10的75次方。

75的二进制形式为1001011.

10的75次方 = 1064∗108∗102∗101 
在这个过程中，我们先求出101，然后根据101求出102，再根据102求出104，……，最后再根据1032求出1064，即75的二进制形式总共有多少位，我们就使用几次乘法。

在步骤2进行的过程中，把应该累乘的值相乘即可。即二进制形式中是1的位置的相乘，这样就得到结果1064∗108∗102∗101。

下面是使用python3.5实现的代码：

#矩阵乘法方法。时间复杂度(logN)
def fibonacciUseMatrix(n):
    def matrixPower(m, p):
        res = [[0 if i != j else 1 for i in range(len(m[0]))] for j in range(len(m))]  #单位矩阵
        tmp = m
        while p > 0:
            if p & 1 != 0:
                res = muliMatrix(res, tmp)
            tmp = muliMatrix(tmp, tmp)
            p >>= 1
        return res

    def muliMatrix(m1, m2):
        res = [[0 for i in range(len(m2[0]))] for j in range(len(m1))]
        for i in range(len(m1)):
            for j in range(len(m2[0])):
                for k in range(len(m1[0])):
                    res[i][j] += m1[i][k] * m2[k][j]
        return res

    if n < 1:
        return 0
    if n == 1 or n == 2:
        return 1
    base = [[1,1],[1,0]]
    res = matrixPower(base, n-2)
    return res[0][0] + res[0][1]

母牛数量问题。所有牛都不会死，所以第N-1年的牛都会活到第Ｎ年。同时，所有成熟的母牛都会生一只小母牛，那么成熟牛的数量怎么计算呢？就是第N-3年的所有牛，到第Ｎ年肯定都是成熟的牛，期间出生的牛肯定都没有成熟。所以C(N) = C(N-1) + C(N-3)。该问题同样也可以使用矩阵乘法的方式，只不过这里是三阶递推数列，原理同上，详情见如下代码。

下面是使用python3.5实现的代码。

#母牛数量问题
＃递归
def fibonacci3(n):
    if n < 1 :
        return 0
    if n == 1 or n == 2 or n == 3:
        return n
    return fibonacci3(n-1) + fibonacci3(n-3)

＃动态规划
def fibonacci4(n):
    if n < 1:
        return 0
    if n == 1 or n == 2 or n == 3:
        return 3
    prepre = 1
    pre = 2
    cur = 3
    for i in range(4, n+1):
        tmp = cur
        cur = prepre + cur
        prepre = pre
        pre = tmp
    return cur

＃矩阵乘法
def fibonacciUseMatrix2(n):
    def matrixPower(m, p):
        res = [[1 if i == j else 0 for i in range(len(m[0]))] for j in range(len(m))]
        tmp = m
        while p > 0:
            if p & 1 != 0:
                res = muliMatrix(res, tmp)
            tmp = muliMatrix(tmp, tmp)
            p >>= 1
        return res

    def muliMatrix(m1, m2):
        res = [[0 for i in range(len(m2[0]))] for j in range(len(m1))]
        for i in range(len(m1)):
            for j in range(len(m2[0])):
                for k in range(len(m1[0])):
                    res[i][j] += m1[i][k] * m2[k][j]
        return res

    if n < 1:
        return 0
    if n == 1 or n ==2 or n == 3:
        return n
    base = [[1,1,0], [0,0,1], [1,0,0]]
    res = matrixPower(base, n-3)
    return 3 * res[0][0] + 2 * res[1][0] + res[2][0]

递归与动态规划---矩阵的最小路径和
2017年08月12日 00:06:58
阅读数：203
【题目】

　　给定一个矩阵ｍ，从左上角开始每次都只能向下或者向右走，最后到达右下角的位置，路径上所有的数字累加起来就是路径和，返回所有路径中最小的路径和。

【基本思路】 
　 
　　生成和m同样大小的矩阵dp，dp[i][j]的值表示从左上角走到位置(i, j)的最小路径和，矩阵的第一行和第一列的值可以先确定，其他的位置dp[i][j]的值等于min(dp[i-1][j], dp[i][j-1]) + m[i][j]。

#python3.5
#经典动态规划实现
def minPathSum1(m):
    if m == None or len(m) == 0 or m[0] == None or len(m[0]) == 0:
        return 0
    dp = [[0 for i in range(len(m[0]))] for j in range(len(m))]
    dp[0][0] = m[0][0]
    for i in range(1, len(m[0])):
        dp[0][i] = dp[0][i-1] + m[0][i]
    for j in range(1, len(m)):
        dp[j][0] = dp[j-1][0] + m[j][0]
    for i in range(1, len(m)):
        for j in range(1, len(m[0])):
            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + m[i][j]
    return dp[len(m)-1][len(m[0])-1]

#经过空间压缩的动态规划
def minPathSum2(m):
    if m == None or len(m) == 0 or m[0] == None or len(m[0]) == 0:
        return 0
    more = max(len(m), len(m[0]))
    less = min(len(m), len(m[0]))
    rowmore = True if more == len(m) else False
    dp = [0 for i in range(less)]
    dp[0] = m[0][0]
    for i in range(1, less):
        dp[i] = dp[i-1] + m[0][i] if rowmore else m[i][0]
    for i in range(1, more):
        dp[0] = dp[0] + m[i][0] if rowmore else m[0][i]
        for j in range(1, less):
            dp[j] = min(dp[j-1], dp[j]) + m[i][j] if rowmore else m[j][i]
    return dp[less-1]

递归与动态规划---换钱的最少货币数（每种货币有无数张）
2017年08月12日 00:15:12
阅读数：394
【题目】

　　给定一个数组arr，arr中所有的值都为正数且不重复，每个值代表一种面值的货币，每种面值的货币有无数张，再给定一个整数aim代表要找的钱数，求组成aim的最少货币数。

【基本思路】

　　生成行数为N、列数为aim+1的dp矩阵，dp[i][j]的含义是在可以任意使用arr[0…i]货币的情况下，组成j所需的最小张数，矩阵的每一行和每一列可以先确定，其他的位置dp[i][j] = min(dp[i-1][j], dp[i][j-arr[i]]+1)，接下来解释dp[i][j]的值怎么确定：　　

矩阵的第一行表示只使用货币arr[0]的情况下，可以组成的钱数，当然只有钱数等于arr[0]的倍数时才成立，所以把这些位置设置为j//arr[0]，其余部分设置为32位整数的最大值（为什么是32位整数的最大值？ 因为题目求的是换钱的最少货币数，所以找不开的情况下要设置的尽可能大）

矩阵的第一列表示找的钱数为0的情况下需要的最小张数，货币为0是完全不需要任何货币，所以全部设置为0。

矩阵的其他位置来自以下的情况： 
1）完全不使用货币arr[i]的情况下的最小张数，即dp[i-1][j]。 
2）只使用1张货币arr[i]的情况下的最小张数，即dp[i-1][j-arr[i]]+1。 
3）只使用2张货币arr[i]的情况下的最小张数，即dp[i-1][j-2*arr[i]]+2。 
…… 
k+1）只使用k张货币arr[i]的情况下的最小张数，即dp[i-1][j-k*arr[i]]+k。k = j//arr[i] 
选择其中的最小值即可。

根据以上的推理，我们可以推导出使用arr[0…i]来组成j-arr[i]情况下的最少货币数，即dp[i][j-arr[i]]，即将j-arr[i]整体看作j，分别为: 
1）dp[i-1][j-arr[i]]。 
2）dp[i-1][j-2*arr[i]]+1。 
3）dp[i-1][j-3*arr[i]]+2。 
…… 
k+1）dp[i-1][j-(k+1)*arr[i]]+k。k = j - arr[i]//arr[i] 
我们发现这些值都为dp[i][j]除第1项以外相应情况下+1。所以，我们可以推到出dp[i][j]的公式为dp[i][j] = min(dp[i-1][j], dp[i][j-arr[i]] + 1)。

下面是使用python3.5实现的代码

#python3.5
#经典动态规划实现
def minCoins1(arr, aim):
    if arr == None or len(arr) == 0 or aim < 0:
        return -1
    row = len(arr)
    dp = [[sys.maxsize for i in range(aim+1)] for j in range(row)]
    for i in range(row):
        dp[i][0] = 0
    for j in range(1, aim+1):
        if j % arr[0] == 0:
            dp[0][j] = j // arr[0]
    for i in range(1, row):
        for j in range(1, aim+1):
            left = sys.maxsize
            if j - arr[i] >= 0 and dp[i][j-arr[i]] != sys.maxsize:
                left = dp[i][j-arr[i]] + 1
            dp[i][j] = min(left, dp[i-1][j])
    return dp[row-1][aim] if dp[row-1][aim] != sys.maxsize else -1

#经过空间压缩的动态规划
def minCoins2(arr, aim):
    if arr == None or len(arr) == 0 or aim < 0:
        return -1
    row = len(arr)
    dp = [sys.maxsize for i in range(aim+1)]
    dp[0] = 0
    for i in range(1, aim+1):
        if i % arr[0] == 0:
            dp[i] = i // arr[0]
    for i in range(1, row):
        dp[0] = 0
        for j in range(1, aim+1):
            left = sys.maxsize
            if j - arr[i] >= 0 and dp[j-arr[i]] != sys.maxsize:
                left = dp[j-arr[i]] + 1
            dp[j] = min(left, dp[j])
    return dp[aim] if dp[aim] != sys.maxsize else -1


递归与动态规划---换钱的最少货币数（每种货币只有一张）
2017年08月12日 00:18:12
阅读数：144
【题目】

　　给定一个数组arr，arr中所有的值都为正数且不重复，每个值代表一种面值的货币，每种面值的货币只有一张，再给定一个整数aim代表要找的钱数，求组成aim的最少货币数。

【基本思路】

　　生成行数为N、列数为aim+1的dp矩阵，dp[i][j]的含义是在可以任意使用arr[0…i]货币的情况下，组成j所需的最小张数，矩阵的每一行和每一列可以先确定，其他的位置dp[i][j] = min(dp[i-1][j], dp[i-1][j-arr[i]]+1)，接下来解释dp[i][j]的值怎么确定：　　

矩阵的第一行表示只使用货币arr[0]的情况下，可以组成的钱数，当然只有钱数等于arr[0]时才成立，所以把该位置设置为1，其余部分设置为32位整数的最大值（为什么是32位整数的最大值？ 因为题目求的是换钱的最少货币数，所以找不开的情况下要设置的尽可能大）

矩阵的第一列表示找的钱数为0的情况下需要的最小张数，货币为0是完全不需要任何货币，所以全部设置为0

矩阵的其他位置来自以下两种情况：1）不使用arr[i]货币的情况组成钱数j的张数，也就是dp[i-1][j]。2）使用arr[i]的情况下，因为只有1张arr[i]货币，所以我们在可以任意使用arr[0…i-1]来组成钱数为j-arr[i]的情况下 + 1即可，也就是dp[i-1][j-arr[i]]+1。选择两种情况的最小值即可，另外在计算dp[i-1][j-arr[i]]+1时应当注意j-arr[i]的越界问题。

下面是使用python3.5实现的代码

#python3.5
#经典动态规划实现
def minCoins3(arr, aim):
    if arr == None or len(arr) == 0 or aim < 0:
        return -1
    row = len(arr)
    dp = [[sys.maxsize for i in range(aim+1)] for j in range(len(arr))]
    for i in range(len(arr)):
        dp[i][0] = 0
    if arr[0] <= aim:
        dp[0][arr[0]] = 1
    for i in range(1, len(arr)):
        for j in range(1, aim+1):
            leftUp = sys.maxsize
            if j-arr[i] >= 0 and dp[i-1][j-arr[i]] != sys.maxsize:
                leftUp = dp[i-1][j-arr[i]] + 1
            dp[i][j] = min(leftUp, dp[i-1][j])
    return dp[row-1][aim] if dp[row-1][aim] != sys.maxsize else -1

#经过空间压缩的动态规划
def minCoins4(arr, aim):
    if arr == None or len(arr) == 0 or aim < 0:
        return -1
    row = len(arr)
    dp = [sys.maxsize for i in range(aim+1)]
    dp[0] = 0
    if arr[0] <= aim:
        dp[arr[0]] = 1
    for i in range(1, row):
        for j in range(1, aim+1):
            leftUp = sys.maxsize
            if j-arr[i] >= 0 and dp[j-arr[i]] != sys.maxsize:
                leftUp = dp[j-arr[i]] + 1
            dp[j] = min(leftUp, dp[j])
    return dp[aim] if dp[aim] != sys.maxsize else -1

递归与动态规划---换钱的方法数
2017年08月12日 16:55:35
阅读数：412
【问题】

　　给定数组arr，arr中所有的值都为整数且不重复。每个值代表一种面值的货币，每种货币有无数张，再给定一个整数aim代表要找的钱数，求换钱的方法有多少种。

【基本思路】

这道题的经典之处在于它可以体现暴力递归、记忆搜索、动态规划之间的关系，并可以在动态规划的基础上再进行一次优化。

首先介绍暴力递归的方法。如果arr = [5, 10, 25, 1]，aim = 1000，分析过程如下：

用０张５元的货币，让[10, 25, 1]组成剩下的1000，最终方法数记为res1。
用１张５元的货币，让[10, 25, 1]组成剩下的995，最终方法数记为res2。
用２张５元的货币，让[10, 25, 1]组成剩下的990，最终方法数记为res3。 
……
用201张５元的货币，让[10, 25, 1]组成剩下的0，最终方法数记为res201。
那么res1 + res2 + res3 + …… +res201的值就是中的方法数。根据如上的分析过程定义递归函数process1(arr, index, aim)它的含义是如果用arr[index..N-1]这些面值的钱组成aim，返回总的方法数。最坏情况下时间复杂度为O(aim^N)，N表示数组的长度。

下面是用python3实现的代码

#暴力递归方法
def coins1(arr, aim):
    def process1(arr, index, aim):
        if index == len(arr):
            return 1 if aim == 0 else 0
        else:
            res = 0
            for i in range(0, aim//arr[index]+1):
                res += process1(arr, index+1, aim-arr[index]*i)
        return res


    if arr == None or len(arr) == 0 or aim < 0:
        return 0
    return process1(arr, 0, aim)

记忆搜索的方法。在暴力递归中，有很多的重复计算，比如使用0张5元+1张10元的情况和使用2张5元+0张10元的情况，都需要求[25, 1]组成剩下的990的方法数。记忆搜索就是使用一张记录表将递归过程中的结果进行记录，当下次再遇到同样的递归过程，就直接使用表中的数据，这样就对暴力递归进行了优化。 
时间复杂度为O(N*aim^2)，空间复杂度O(N*aim)。

#记忆搜索方法
def coins2(arr, aim):
    def process2(arr, index, aim, records):
        if index == len(arr):
            return 1 if aim == 0 else 0
        else:
            res = 0
            for i in range(0, aim//arr[index]+1):
                mapValue = records[index+1][aim-arr[index]*i]
                if mapValue != 0:
                    res += mapValue if mapValue != -1 else 0
                else:
                    res += process2(arr, index+1, aim-arr[index]*i, records)
        records[index][aim] = -1 if res == 0 else res
        return res


    if arr == None or len(arr) == 0 or aim < 0:
        return 0
    records = [[0 for i in range(aim+1)] for j in range(len(arr)+1)]
    return process2(arr, 0, aim, records)

动态规划的方法。首先生成行数为N、列数为aim+1的dp矩阵，dp[i][j]的含义是在使用arr[0…i]货币的前提下，组成钱数j有多少种方法。dp[i][j]的值求法如下：

对于矩阵的第一行，表示只使用货币arr[0]的情况下，组成钱的方法数，可以组成的钱数是arr[0]的整倍数，所以将其设置成1
对于矩阵的第一列，表示组成钱数0的方法数，很明显是1种，也就是不使用任何货币，所以第一列都设置为1
对于矩阵的其他位置，dp[i][j]的值来自以下几个值的累加：完全不使用货币arr[i]，使用一张货币arr[i]，使用两张货币arr[i]…使用k张货币arr[i]（k=aim//arr[i]），对应到dp表里分别是[i-1][j]、dp[i-1][j-arr[i]]、dp[i-1][j-2*arr[i]]…dp[i-1][j-k*arr[i]]。
时间复杂度为O(N*aim^2)，空间复杂度O(N*aim)。

#动态规划方法
def coins3(arr, aim):
    if arr == None or len(arr) == 0 or aim < 0:
        return 0
    row = len(arr)
    dp = [[0 for i in range(aim+1)]for j in range(row)]
    for i in range(row):
        dp[i][0] = 1
    for j in range(1, aim//arr[0]+1):
        dp[0][arr[0]*j] = 1
    for i in range(1, row):
        for j in range(1, aim+1):
            num = 0
            for k in range(j//arr[i]+1):
                num += dp[i-1][j-arr[i]*k]
            dp[i][j] = num
    return dp[row-1][aim]

对动态规划进行优化。上述动态规划中计算dp[i][j]的过程比较繁琐，其实计算dp的第三步可以进行优化。 
在上述动态规划的第三步中，dp[i][j] = dp[i-1][j] + dp[i-1][j-arr[i]] + dp[i-1][j-2*arr[i]] + …dp[i-1][j-k*arr[i]]。我们发现，这个等式中除了第一项以外其他项的累加和其实就是dp[i][j-arr[i]]，只不过是将j-arr[i]这个整体当作j，所以步骤3可以优化为dp[i][j] = dp[i-1][j] + dp[i][j-arr[i]]。

时间复杂度为O(N*aim)，空间复杂度O(N*aim)。

#动态规划升级版
def coins4(arr, aim):
    if arr == None or len(arr) == 0 or aim < 0:
        return 0
    row = len(arr)
    dp = [[0 for i in range(aim+1)] for j in range(row)]
    for i in range(row):
        dp[i][0] = 1
    for j in range(1, aim//arr[0]+1):
        dp[0][arr[0]*j] = 1
    for i in range(1,row):
        for j in range(1, aim+1):
            dp[i][j] = dp[i-1][j]
            dp[i][j] += dp[i][j-arr[i]] if j-arr[i] >= 0 else 0
    return dp[row-1][aim]

对动态规划进行再优化。即使用空间压缩的方法，优化动态规划的空间复杂度，只是用一维数组记录数据而不是矩阵。 
时间复杂度为O(N*aim)，空间复杂度O(aim)。

#动态规划升级版+空间压缩
def coins5(arr, aim):
    if arr == None or len(arr) == 0 or aim < 0:
        return 0
    dp = [0 for i in range(aim+1)]
    for i in range(aim//arr[0]+1):
        dp[arr[0]*i] = 1
    for i in range(len(arr)):
        for j in range(1, aim+1):
            dp[j] += dp[j-arr[i]] if j-arr[i] >= 0 else 0
    return dp[aim]

递归与动态规划---最长递增子序列问题
2017年08月13日 00:03:45
阅读数：311
【问题】 
给定数组arr，返回arr的最长递增子序列

【基本思路】

首先介绍时间复杂度为O(N^2)的方法。具体过程如下：

生成长度为N(arr的长度)的数组dp，dp[i]表示在以arr[i]结尾的情况下，arr[0…i]中的最长子序列。

dp[0]表示以arr[0]结尾的情况下最长子序列，只有它自己，设为1

对于dp的其他位置，从左到右依次遍历，假设遍历到i，首先在arr[0…i-1]中找到比arr[i]小且相应的dp值最大的位置记为j，arr[j]即为以arr[i]结尾的倒数第二小的数，此时dp[i]的值便可以确定，dp[i] = dp[j] + 1。如果arr[0…i-1]中没有比arr[i]小的值，则dp[i]直接记为1。
接下来就是利用生成好的dp数组得到最长的递增子序列。

首先遍历找到dp数组中的最大值maxlen以及下标index，其中maxlen就是最长递增子序列的长度，arr[index]就是最长递增子序列的最后一个数字，然后从index向前遍历数组arr，找到比arr[index]小的数arr[j]并且dp[j] + 1 = dp[index],这个值就是子序列的倒数第二个数，依次向前遍历即可得到最长递增子序列。

以下是使用python3.5实现的代码

#最长递增子序列
def getMaxSubList1(arr):
    def getdp(arr):
        dp = [1 for i in range(len(arr))]
        for i in range(len(arr)):
            for j in range(i):
                if arr[i] > arr[j]:
                    dp[i] = max(dp[i], dp[j]+1)
        return dp

    def generateLIS(arr, dp):
        maxlen = 0
        index = 0
        for i in range(len(dp)):
            if dp[i] > maxlen:
                maxlen = dp[i]
                index = i
        lis = [ for i in range(maxlen)]
        lis[maxlen-1] = arr[index]
        maxlen -= 1
        for i in range(index, -1, -1):
            if arr[i] < arr[index] and dp[i]+1 == dp[index]:
                lis[maxlen-1] = arr[i]
                maxlen -= 1
                index = i
        return lis


    if arr == None or len(arr) == 0:
        return None
    dp = getdp(arr)
    return generateLIS(arr, dp)

接下里介绍一个时间复杂度为O(NlogN)的方法。 
该方法是在生成dp数组的时候利用二分查找来进行优化，通过另外一个辅助数组ends完成。ends[b]的含义为遍历到目前位置，长度为b + 1的子序列的最小结尾。过程如下：

生成长度为Ｎ的dp数组和ends数组，令dp[0] = 1，ends[0] = arr[0]。
从左到右遍历arr的剩余部分，假设遍历到位置i，首先在ends中已有的数值中找第一个比arr[i]大的数的位置k(使用二分查找)，把该位置的数替代为arr[i]，dp[i] = k + 1。依次遍历即可得到dp数组。
def getMaxSubList2(arr):
    def getdp2(arr):
        dp = [0 for i in range(len(arr))]
        ends = [0 for i in range(len(arr))]
        right = 0
        dp[0] = 1
        ends[0] = arr[0]
        for i in range(1, len(arr)):
            l = 0
            r = right
            while l <= r:
                m = (l + r) // 2
                if arr[i] > ends[m]:
                    l = m + 1
                else:
                    r = m - 1
            right = max(right, l)
            dp[i] = l + 1
            ends[l] = arr[i]
        return dp

    def generateLIS(arr, dp):
        maxlen = 0
        index = 0
        for i in range(len(dp)):
            if dp[i] > maxlen:
                maxlen = dp[i]
                index = i
        lis = [0 for i in range(maxlen)]
        lis[maxlen-1] = arr[index]
        maxlen -= 1
        for i in range(index, -1, -1):
            if arr[i] < arr[index] and dp[i]+1 == dp[index]:
                lis[maxlen-1] = arr[i]
                maxlen -= 1
                index = i
        return lis


    if arr == None or len(arr) == 0:
        return None
    dp = getdp2(arr)
    return generateLIS(arr, dp)

递归与动态规划---汉诺塔问题
2017年08月13日 20:26:55
阅读数：346
【问题】

　　给定一个整数n，代表汉诺塔游戏中从小到大放置的n个圆盘，假设开始时所有的圆盘都放在左边的柱子上，想按照汉诺塔游戏的要求把所有的圆盘都移到右边的柱子上，实现函数打印最优移动轨迹。

【举例】

　　n = 2时，打印： 
　　move from left to mid 
　　move from left to right 
　　move from mid to right

【基本思路】

假设有left柱子，mid柱子和right柱子，都在left柱子的圆盘1～i完全移动到right，最优的过程为：

将圆盘1～i-1从left移动到mid
将圆盘i从left移动到right
将圆盘1～i-1从mid移动到right
如果盘子只有一个，直接从left移动到right即可

下面是使用python3.5实现的代码

#汉诺塔问题
def hanoi(n):
    def func(n, left, mid, right):
        if n == 1:
            print("move from " + left + " to " + right)
        else:
            func(n-1, left, right, mid)
            func(1, left, mid, right)
            func(n-1, mid, left, right)


    if n < 1:
        return
    return func(n, "left", "mid", "right")


递归与动态规划---最长公共子序列问题
2017年08月13日 20:55:21
阅读数：201
【题目】

　　给定两个字符串str1和str2，返回两个字符串的最长公共子序列。

【举例】

　　str1 = “1A2C3D4B56”，str2 = “B1D23CA45B6A”. 
　　“123456”或者“12C4B6”都是最长公共子序列，返回哪一个都行

【基本思路】

如果str1和str2的长度分别为N，M，生成N×M的矩阵dp，dp[i][j]的含义是str1[0…i]与str2[0…j]的最长公共子序列，dp[i][j]的计算如下：

矩阵的第一行表示str1[0]与str2[0…j]的最长公共子序列问题，当str1[0]与str2[j]相等时，dp[0][j] = 1

矩阵的第一列同上，当str2[0]与str1[i]相等时，dp[i][0] = 1

矩阵的其他位置，dp[i][j]的值可能来自以下的三种情况： 
　可能是dp[i-1][j], 代表str1[0…i-1]与str2[0…j]的最长公共子序列长度。 
　可能是dp[i][j-1], 代表str1[0…i]与str2[0…j-1]的最长公共子序列长度。 
　如果str1[i] == str2[j]，还可能是dp[i-1][j-1] + 1。 
选择三种情况中最大的作为dp[i][j]的值
接下来根据str1、str2和dp表就可以得到最长的公共子序列。具体方法如下：

　　 从dp矩阵的右下角开始，如果该位置的值等于相邻左边的值，左移；如果该位置的值等于相邻上方的值，上移；如果既不能左移也不能上移，此处的值便是最长公共子序列的末尾值，保存此位置的值，然后向左上角移动。按照上述步骤依次移动便可以得到最长的公共子序列。

下面是使用python3.5实现的代码

#最长公共子序列问题
def maxCommonSubSerial(str1, str2):
    def getdp(str1, str2):
        dp = [[0 for i in range(len(str2))] for j in range(len(str1))]
        dp[0][0] = 1 if str1[0] == str2[0] else 0
        for i in range(1, len(str2)):
            dp[0][i] = max(dp[0][i-1], 1 if str1[0] == str2[i] else 0)
        for i in range(1, len(str1)):
            dp[i][0] = max(dp[i-1][0], 1 if str1[i] == str2[0] else 0)
        for i in range(1, len(str1)):
            for j in range(1, len(str2)):
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
                if str1[i] == str2[j]:
                    dp[i][j] = max(dp[i-1][j-1]+1, dp[i][j])
        return dp


    if str1 == None or str2 == None or str1 == "" or str2 == "":
        return ""
    dp = getdp(str1, str2)
    m = len(str2) - 1
    n = len(str1) - 1
    res = [0 for i in range(dp[n][m])]
    index = dp[n][m] - 1
    while index >= 0:
        if n > 0 and dp[n][m] == dp[n-1][m]:
            n -= 1
        elif m > 0 and dp[n][m] == dp[n][m-1]:
            m -= 1
        else:
            res[index] = str1[n]
            index -= 1
            m -= 1
            n -= 1
    return ''.join(res)

递归与动态规划---最长公共子串问题
2017年08月13日 22:52:03
阅读数：285
【题目】

　　给定两个字符串str1和str2，返回两个字符串的最长公共子串。

【举例】

　　str1 = “1AB2345CD”，str2 = “12345EF”，返回”2345”。

【基本思路】

　　假设str1的长度为N，str2的长度为M，生成N×M的矩阵dp，dp[i][j]的含义是必须以str1[i]和str2[j]结尾的最长公共子串的长度，dp[i][j]的计算方法如下：

　　１．矩阵的第一行。如果str1[0] == str2[j]，此时以str1[0]和str2[j]结尾的最长公共子串就是它们自身，dp[0][j]设为1，其余位置设为0。　　 
　　２．矩阵的第一列。如果str1[i] == str2[0]，dp[i][0]设为1，其余位置设为0。　　 
　　３． 矩阵的其它位置计算如下： 
　　　１）如果str1[i] != str2[j]，说明以str1[i]和str2[j]结尾的子串是不存在的，设为0。 
　　　２） 如果str1[i] == str2[j]，说明str1[i]和str2[j]可以作为公共子串的最后一个字符，从最后一个字符向左能扩多大的长度呢？就是dp[i-1][j-1]的值，所以dp[i][j] = dp[i-1][j-1] + 1。

　　生成dp表之后，再得到最长的公共子串就很容易了。 
　　dp表中的最大值（假设为dp[x][y]）就是最长公共子串的长度（假设为maxlen），str1中从下标x开始向左数的maxlen个字符就是最长的公共子串。

　　因为dp[i][j]的值只依赖于dp[i-1][j-1]，所以可以用空间压缩的方法将空间复杂度从Ｏ(N*M)降低到Ｏ(1)。

下面是用python3.5实现的代码

#最长公共子串问题
#经典动态规划方法。时间复杂度O(M*N)，空间复杂度O(M*N)
def maxCommonSubStr(str1, str2):
    def getdp(str1, str2):
        dp = [[0 for i in range(len(str2))] for j in range(len(str1))]
        for i in range(len(str2)):
            if str2[i] == str1[0]:
                dp[0][i] = 1
        for i in range(len(str1)):
            if str1[i] == str2[0]:
                dp[i][0] = 1
        for i in range(1, len(str1)):
            for j in range(1, len(str2)):
                if str1[i] == str2[j]:
                    dp[i][j] = dp[i-1][j-1] + 1
        return dp


    if str1 == None or str2 == None or str1 == '' or str2 == '':
        return ""
    dp = getdp(str1, str2)
    length = 0
    index = 0
    for i in range(len(str1)):
        for j in range(len(str2)):
            if dp[i][j] > length:
                length = dp[i][j]
                index = i
    return str1[index-length+1 : index+1]

#动态规划升级版。时间复杂度O(M*N)，空间复杂度O(1)
def maxCommonSubStr2(str1, str2):
    if str1 == None or str2 == None or str1 == "" or str2 == "":
        return ""
    maxlen = 0
    index = 0
    row = 0
    col = len(str2) - 1
    while row < len(str1):
        i = row 
        j = col
        length = 0
        while i < len(str1) and j < len(str2):
            if str1[i] == str2[j]:
                length += 1
            else:
                length = 0
            if length > maxlen:
                maxlen = length
                index = i
            i += 1
            j += 1
        if col > 0:
            col -= 1
        else:
            row += 1
    return str1[index-maxlen+1 : index+1]


递归与动态规划---最小编辑代价
2017年08月14日 01:34:31
阅读数：131
【题目】

　　给定两个字符str1和str2，再给定三个整数ic，dc，rc，分别代表插入，删除和替换一个字符的代价，返回将str1编辑成str2的最小代价。

【举例】

　　str1 = “abc”，str2 = “adc”，ic = 5，dc = 3，rc = 100。 
　　从str1编辑到str2，先删除’b’，然后插入’d’是代价最小的，所以返回8。

【基本思路】

　　如果str1的长度为N，str2的长度为M，生成(N+1)×(M+1)的矩阵dp，为什么N+1,M+1，因为我们需要在字符串的开头添加一个空字符的特殊情况，dp[i][j]的值代表str1[0…i-1]编辑成str2[0…j-1]的最小代价。dp的计算如下：

矩阵的第一行表示空字符编辑成str2[0…j-1]所需要的最小代价，当然只需要插入操作即可，所以dp[0][j] = ic * j。

矩阵的第一列表示str1[0…i-1]编辑成空字符所需要的最小代价，当然只需要删除操作即可，所以dp[i][0] = dc * i。

矩阵的其他位置来自以下的三种情况：dp[i-1][j]+dc，dp[i][j-1]+ic，(dp[i-1][j-1] or dp[i-1][j-1]+rc)。 
1）dp[i-1][j] + dc，表示先删除str1[i-1]，然后将str1[0…i-2]编辑成str2[0…j-1]

2）dp[i][j-1] + ic，表示将str1[i-1]编辑成str2[0…j-2]，然后再插入str2[j-1]

3）dp[i-1][j-1] or dp[i-1][j-1]+rc，表示如果str1[i-1] != str2[j-1]，则先将str1[0…i-2]编辑成str2[0…j-2]再将str1[i-1]替换成str2[j-1]，如果str1[i-1] == str2[j-1]，则将str1[0…i-2]编辑成str2[0…j-2]后就不需要进行替换了。

下面是用python3.5实现的代码

#最小编辑代价
#经典动态规划方法。时间复杂度O(M*N),空间复杂度O(M*N)
def minCoin(str1, str2, ic, dc, rc):
    if str1 == None or str2 == None:
        return 0
    row = len(str1) + 1
    col = len(str2) + 1
    dp = [[0 for i in range(col)] for j in range(row)]
    for i in range(row):
        dp[i][0] = i * dc
    for j in range(col):
        dp[0][j] = j * ic
    for i in range(1, row):
        for j in range(1, col):
            if str1[i-1] == str2[j-1]:
                dp[i][j] = dp[i-1][j-1]
            else:
                dp[i][j] = dp[i-1][j-1] + rc
            dp[i][j] = min(dp[i][j], dp[i][j-1] + ic)
            dp[i][j] = min(dp[i][j], dp[i-1][j] + dc)
    return dp[-1][-1]

#动态规划+空间压缩。时间复杂度O(M*N)，空间复杂度O(min{M,N})
def minCoin2(str1, str2, ic, dc, rc):
    if str1 == None or str2 == None:
        return 0
    longs = str1 if len(str1) >= len(str2) else str2
    shorts = str1 if len(str1) < len(str2) else str2
    if longs == str2:
        ic, dc = dc, ic
    dp = [0 for i in range(len(shorts)+1)]
    for i in range(len(dp)):
        dp[i] = ic * i
    for i in range(1, len(longs)+1):
        leftUp = dp[0]
        dp[0] = i * dc
        for j in range(1, len(shorts)+1):
            up = dp[j]
            if longs[i-1] == shorts[j-1]:
                dp[j] = leftUp
            else:
                dp[j] = leftUp + rc
            dp[j] = min(dp[j], up+dc)
            dp[j] = min(dp[j], dp[j-1]+ic)
            leftUp = up
    return dp[-1]


递归与动态规划---字符串的交错组成
2017年08月14日 02:07:45
阅读数：132
【题目】

　　给定三个字符串str1, str2和aim, 如果aim包含且仅包含str1和str2的所有字符，而且在aim中属于str1的字符之间保持原来在str1中的顺序，属于str2的字符之间保持原来在str2中的顺序，那么称aim是str1和str2的交错组成。实现一个函数，判断aim是否是str1和str2的交错组成。

【举例】

　　str1 = “AB”, str2 = “12”。那么”AB12”, “A1B2”, “A12B”, “1A2B”, “1AB2”等都是str1和str2的交错组成。

【基本思路】

　　假设str1的长度为N，str2的长度为M，生成(N+1)*(M+1)的dp矩阵，为什么是N+1,M+1，因为我们需要在字符串的开头添加一个空字符的特殊情况，dp[i][j]的值代表aim[0…i+j-1]能否被str1[0…i-1]和str2[0…j-1]交错组成，dp[i][j]的值计算如下：

矩阵的第一行表示能否只用str2[0…j-1]交错组成aim[0…j-1]，如果str2[0…j-1]等于aim[0…j-1]，则令dp[0][j] = True，否则为False

矩阵的第一列同上，如果str1[0…i-1]等于aim[0…i-1]，则令dp[i][0] = True，否则为False

矩阵的其余位置由以下情况决定： 
1）dp[i-1][j]代表aim[0…i+j-2]能否被str1[0…i-2]和str2[0…j-1]交错组成，如果可以，那么如果再有str1[i-1]等于aim[i+j-1]，说明str1[i-1]又可以作为交错组成aim[0…i+j-1]的最后一个字符。令dp[i][j] = True

2）dp[i][j-1]代表aim[0…i+j-2]能否被str2[0…j-2]和str1[0…i-1]交错组成，如果可以，那么如果再有str2[j-1]等于aim[i+j-1]，说明str2[j-1]又可以作为交错组成aim[0…i+j-1]的最后一个字符。令dp[i][j] = True

3）如果上述情况不满足，令dp[i][j] = False

下面是使用python3.5实现的代码

#字符串的交错组成
#经典动态规划方法
def isCross1(str1, str2, aim):
    if str1 == None or str2 == None or aim == None or len(str1)+len(str2) != len(aim):
        return False
    dp = [[False for i in range(len(str2)+1)] for j in range(len(str1)+1)]
    dp[0][0] = True
    for i in range(1, len(str1)+1):
        if str1[i-1] != aim[i-1]:
            break
        dp[i][0] = True
    for j in range(1, len(str2)+1):
        if str2[j-1] != aim[j-1]:
            break
        dp[0][j] = True
    for i in range(1, len(str1)+1):
        for j in range(1, len(str2)+1):
            if (dp[i-1][j] == True and str1[i-1] == aim[i+j-1]) or (dp[i][j-1] == True and str2[j-1] == aim[i+j-1]):
                dp[i][j] = True
    return dp[-1][-1]

#动态规划+空间压缩
def isCross2(str1, str2, aim):
    if str1 == None or str2 == None or aim == None or len(str1)+len(str2) != len(aim):
        return False
    longs = str1 if len(str1) >= len(str2) else str2
    shorts = str1 if len(str1) < len(str2) else str2
    dp = [False for i in range(len(shorts)+1)]
    dp[0] = True
    for i in range(1, len(dp)):
        if shorts[i-1] != aim[i-1]:
            break
        dp[i] = True
    for i in range(1, len(longs)+1):
        for j in range(1, len(shorts)+1):
            if (dp[j-1] == True and shorts[j-1] == aim[i+j-1]) or (dp[i] == True and longs[i-1] == aim[i+j-1]):
                dp[j] = True
    return dp[-1]

递归与动态规划---龙与地下城游戏问题
2017年08月15日 13:08:02
阅读数：224
【题目】

　　给定一个二维数组map，含义是一张地图，例如如下，矩阵： 
　　-2 　-3　 3 
　　-5　-10　1 
　　0 　30　-5 
　　游戏规则如下：

骑士从左上角出发，每次只能向右或者向下走，最后到达右下角见到公主。
地图中每个位置的只代表骑士要遭遇的事。如果是负数，表示此处有怪兽，要让骑士损失血量。如果是非负数，表示此处有血瓶，能让骑士回血。
骑士从左上角到右下角的过程，走到任何一个位置，血量都不能少于１。
为了保证骑士能顺利见到公主，初始血量至少是多少？根据map，返回初始血量。

【基本思路】

　　首先生成和map一样大的矩阵dp，dp[i][j]表示如果骑士要走上位置（i，j），并且从该位置选择一条最优的路径，所需要的血量最少是多少。本题相当于是求dp[0][0]的值，所以，采用倒着填表的方式便可以得到最终结果。dp[i][j]的计算方式如下：

矩阵的右下角的位置是骑士到达的最后位置，骑士经过这里的时候只要血量不少于1即可，如果该位置是血瓶，即map[2][2] >= 0，则dp[2][2] == 1即可，否则dp[2][2] == -map[2][2] + 1。

矩阵的最后一列，表示骑士只能向下走，所以此时只要满足在当前位置（i，col-1） (col表示矩阵的列数)加上血或者扣完血之后的血量等于dp[i+1][col-1]即可。

矩阵的最后一行，表示骑士只能向右走，只要满足在当前位置（row-1，j）(row表示矩阵的行数)加上血或者扣完血之后的血量等于dp[row-1][j+1] 即可。

骑士在矩阵的其他位置，都有向右或者向下两种选择，只要选择需要血量最少的一个即可。

下面是使用python3.5实现的代码

#龙与地下城游戏问题
#经典动态规划方法
def minHP1(mat):
    if mat == None or mat[0] == None or len(mat) == 0 or len(mat[0]) == 0:
        return 1
    row = len(mat)
    col = len(mat[0])
    dp = [[0 for i in range(col)] for j in range(row)]
    dp[row-1][col-1] = max(-mat[row-1][col-1]+1, 1)
    for i in range(row-2, -1, -1):
        dp[i][col-1] = max(dp[i+1][col-1] - mat[i][col-1], 1)
    for j in range(col-2, -1, -1):
        dp[row-1][j] = max(dp[row-1][j+1] - mat[row-1][j], 1)
    for i in range(row-2, -1, -1):
        for j in range(col-2, -1, -1):
            right = max(dp[i][j+1] - mat[i][j], 1)
            down = max(dp[i+1][j] - mat[i][j], 1)
            dp[i][j] = min(right, down)
    return dp[0][0]

#动态规划＋空间压缩
def minHP2(mat):
    if mat == None or mat[0] == None or len(mat[0]) == 0 or len(mat) == 0:
        return 1
    more = len(mat) if len(mat) >= len(mat[0]) else len(mat[0])
    less = len(mat) if len(mat) < len(mat[0]) else len(mat[0])
    rowmore = True if more == len(mat) else False
    dp = [0 for i in range(less)]
    dp[-1] = max(-mat[more-1][less-1]+1, 1)
    for j in range(less-2, -1, -1):
        row = more-1 if rowmore else j
        col = j if rowmore else more-1
        dp[j] = max(dp[j+1] - mat[row][col], 1)
    for i in range(more-2, -1, -1):
        row = i if rowmore else less-1
        col = less-1 if rowmore else i
        dp[-1] = max(dp[-1] - mat[row][col], 1)
        for j in range(less-2, -1, -1):
            row = i if rowmore else j
            col = j if rowmore else i
            right = max(dp[j+1] - mat[row][col], 1)
            down = max(dp[j] - mat[row][col], 1)
            dp[j] = min(right, down)
    return dp[0]


递归与动态规划---数字字符串转换为字母组合的种数
2017年08月15日 13:35:02
阅读数：284
【题目】

　　给定一个字符串str，str全部由数字字符组成，如果str中某一个或者某相邻两个字符组成的子串在1~26之间，则这个子串可以转换为一个字母。规定“1”转换为“A”，“2”转换为“B”……“26”转换为“Z”。求str有多少种不同的转换结果。

【举例】

　　str = “1111” 
　　能转换成的结果有“AAAA”，“LAA”，“ALA”，“AAL”和“LL”，返回5。 
　　str = “01”，“0”没有对应的字母，返回0。

【基本思路】 
1.暴力递归的方法。定义递归函数p(i)，p(i)表示只转换字符串的i～N-1部分（N表示字符串的长度），一共有多少种转换结果。接下来便可以进行递归求解：

如果i == N，p(N)表示没有任何字符需要转换，返回 1。

如果str[i] == ‘0’，因为以0开头的子串都能进行转换，所以返回 0。

如果不满足条件1和2，说明此时str[i]在 ‘1’ 到 ‘9’ 之间，这个时候str[i]能转换的种数至少包含p(i+1)。如果str[i]和str[i+1]的组合又在 ‘10’ 到 ‘26’ 之间，则str[i]能转换的种数还要包含p(i+2)，即ｐ(i) = p(i+1) 或者p(i) = p(i+1) + p(i+2)。
2.动态规划的方法。由上述可知，p(i)的值最多依赖于p(i+1)和p(i+2)，即p(i) = p(i+1) (+ p(i+2))，这就是典型的斐波那契问题的变形题，只不过这里是从后往前计算而已。

下面是使用python3.5实现的代码

#数字字符串转换为字母组合的种数
#暴力递归方法
def num1(str1):
    def process1(str1, i):
        if i == len(str1):
            return 1
        if str1[i] == '0':
            return 0
        res = process1(str1, i+1)
        if i+1 < len(str1) and ((int(str1[i])) * 10 + int(str1[i+1])) < 27:
            res += process1(str1, i+2)
        return res



    if str1 == None or str1 == "":
        return 0
    return process1(str1, 0)

#动态规划方法
def num2(str1):
    if str1 == None or str1 == "":
        return 0
    cur = 1 if str1[-1] != '0' else 0
    nex = 1
    for i in range(len(str1)-2, -1, -1):
        if str1[i] == '0':
            nex = cur
            cur = 0
        else:
            tmp = cur
            if int(str1[i]) * 10 + int(str1[i+1]) < 27:
                cur += nex
            nex = tmp
    return cur


递归与动态规划---排成一条线的纸牌博弈问题
2017年08月15日 19:01:33
阅读数：159
【题目】

　　给定一个整型数组arr，代表数值不同的纸牌排成一条线。玩家A和玩家B依次拿走每张纸牌，规定玩家A先拿，玩家B后拿，但是每个玩家每次只能拿走最左边或者最右边的一张牌，最后所拿牌累加和最大的玩家获胜，玩家A和玩家B都绝顶聪明。请返回最后获胜者的分数。

【举例】

　　arr = [1, 2, 100, 4] 
　　玩家A先拿1，玩家B拿4，玩家A再拿100，玩家B再拿2，游戏结束，玩家A获胜，分数为101。

【基本思路】

　　首先分析暴力递归的方法。定义递归函数f(i, j)表示如果arr[i…j]这个排列上的纸牌被绝顶聪明的人先拿，最终会获得什么分数。定义递归函数s(i, j)，表示如果arr[i…j]这个排列上的纸牌被绝顶聪明的人后拿，最终能获得什么分数。

首先分析f(i, j)，具体过程如下：

如果i == j，表示此时只有一张牌，当然会被先拿牌的人拿走，所以返回arr[i]即可。

如果i != j，那么此时有两种选择，一种是先拿arr[i]，一种是先拿arr[j]。如果先拿走arr[i]，那么对于剩下的arr[i+1…j]，玩家成了后拿牌的人，所以他能获得的分数为arr[i] + s(i+1, j)；同理如果先拿arr[j]，那么他能获得的分数为arr[j] + s(i, j-1)。因为玩家是决定聪明的人，所以他会选择两个决策中最优的，即max(arr[i] + s(i+1, j), arr[j] + s(i, j-1))。

接下来分析s(i, j)，具体过程如下：

如果i == j，表明此时只有一张牌，对于后拿牌的人来说，他肯定拿不上，说以返回 0。

如果i != j，那么此时玩家的拿牌方式其实受到对手的影响，如果对手选择的是arr[i]那么给玩家留下的就是arr[i+1…j]，对于排列arr[i+1…j]玩家成了先拿牌的人，所以他能得到的分数为f(i+1, j)。同理，如果对手选择的是arr[j]那么给玩家留下的就是arr[i…j-1]，对于排列arr[i…j-1]玩家成了先拿牌的人，所以他能得到的分数为f(i, j-1)。因为对手也是绝顶聪明的，所以留给玩家的一定是最坏的情况，所以玩家只能选择两个决策中最差的，即max(f(i+1, j), f(i, j-1))。

下面是使用python3.5实现的代码

#排成一条线的纸牌博弈问题
#暴力递归方法。时间复杂度O(2^N)，空间复杂度O(N)。
def win1(arr):
    def f(arr, start, end):
        if start == end:
            return arr[start]
        return max(arr[start] + s(arr, start+1, end), arr[end] + s(arr, start, end-1))

    def s(arr, start, end):
        if start == end:
            return 0
        return min(f(arr, start+1, end), f(arr, start, end-1))


    if arr == None or len(arr) == 0:
        return 0
    return max(f(arr, 0, len(arr)-1), s(arr, 0, len(arr)-1))

　　动态规划方法。分析上述的递归过程，f(i, j)的值依赖于s(i+1, j)和s(i, j-1)，s(i, j)的值依赖于f(i+1, j)和f(i, j-1)，明显可以使用动态规划的方法有顺序的计算出各个f(i, j)，s(i, j)的值。

　　假设数组的长度为N，生成两个N×N的矩阵代表 f 和 s ，f[i][j]表示玩家从arr[i…j]中先拿牌能得到的分数，s[i][j]表示玩家从arr[i…j]中后拿牌能得到的分数。f[i][j]和s[i][j]的计算如下：

f 和 s 的左对角线代表只有一张牌的情况，所以先拿牌的人肯定能拿上，后拿牌的人肯定拿不上，所以 f[i][i] == arr[i]，s[i][i] == 0。

对于矩阵的其他位置(i, j)，他们依赖于另一个矩阵的位置(i+1, j)和(i, j-1)，所以计算的顺序如下，其中数字越小代表越先计算。

　　　　　　　  这里写图片描述

#动态规划方法。时间复杂度O(N^2)，空间复杂度O(N^2)。
def win2(arr):
    if arr == None or len(arr) == 0:
        return 0
    f = [[0 for i in range(len(arr))] for j in range(len(arr))]
    s = [[0 for i in range(len(arr))] for j in range(len(arr))]
    for j in range(len(arr)):
        f[j][j] = arr[j]
        s[j][j] = 0
        for i in range(j-1, -1, -1):
            f[i][j] = max(arr[i] + s[i+1][j], arr[j] + s[i][j-1])
            s[i][j] = min(f[i+1][j], f[i][j-1])
    return max(f[0][len(arr)-1], s[0][len(arr)-1])

递归与动态规划---跳跃游戏
2017年08月15日 20:04:22
阅读数：103
【题目】

　　给定数组arr，arr[i] == k代表可以从位置i向右跳1～k个距离。比如，arr[2] == 3，代表从位置2可以跳到位置3、位置4或者位置5。如果从位置0出发，返回最少跳几次能跳到arr最后的位置上。

【举例】

　　arr = [3, 2, 3, 1, 1, 4] 
　　arr[0] = 3，选择跳到位置2；arr[2] == 3，可以跳到最后的位置，所以返回2。

【基本思路】

　1.使用3个变量，jump，cur，next。jump表示目前跳了多少次，cur表示跳了jump下后能到达的最远距离，next表示如果再跳一次能到达的最远位置。初始时三个变量都为0。

　2.从左到右依次遍历数组arr，假设遍历到位置i，分析如下：

如果i <= cur，说明跳jump次可以到达位置i，此时不需要进行任何操作。

如果i > cur，说明此时跳jump次不能到达位置i，需要再跳一次才行。此时令jump + 1，cur = next。表示多跳了一次，cur更新成跳jump + 1次能到达的最远距离。

更新next，next = max(next, i + arr[i])，表示下一次多跳一次能到达的最远距离。
下面是使用python3.5实现的代码。

#跳跃游戏
def jump(arr):
    if arr == None or len(arr) == 0:
        return 0
    jump = 0
    cur = 0
    next = 0
    for i in range(len(arr)):
        if cur < i:
            jump += 1
            cur = next
        next = max(i+arr[i], next)
    return jump

递归与动态规划---数组中的最长连续序列
2017年08月15日 20:30:45
阅读数：150
【题目】

　　给定无序数组，返回其中最长的连续序列的长度。

【举例】

　　arr = [100, 4, 200, 1, 3, 2]，最长的连续序列为[1, 2, 3, 4]，所以返回4。

【基本思路】

　　利用哈希表可以实现时间、空间复杂度都为O(N)的方法。具体过程如下：

生成哈希表map，key表示遍历过的某个数，value代表key这个数所在的最长连续序列的长度。

从左到右依次遍历数组，假设遍历到arr[i]，如果arr[i]已经存在于map中，直接跳过，这是因为最长的连续序列必定不包含相同的值。如果arr[i]不存在与map中，则将arr[i]作为key添加到map中，其value值设为1，表示目前arr[i]单独作为一个连续序列。

之后，在map表中查找是否含有arr[i]-1，如果有，说明arr[i]-1和arr[i]可以合并，合并之后记录新序列的长度len、最大值lmax和最小值lmin，将map表中key为lmax，lmin的value值更新为len；

同理在map表中查找是否含有arr[i]+1，如果有，说明arr[i]和arr[i] + 1可以合并，合并之后记录新序列的长度len、最大值rmax和最小值rmin，将map表中key为rmax，rmin的value值更新为len。

遍历过程中用全局变量max记录每次合并出的序列的长度的最大值，最后返回max。
下面是使用python3.5实现的代码

#数组中的最长连续序列
def longestConsecutive(arr):
    def merge(map, less, more):
        left = less - map[less] +1
        right = more + map[more] -1
        length = right - left + 1
        map[left] = length
        map[right] = length
        return length


    if arr == None or len(arr) == 0:
        return 0
    map = {}
    maxstr = 1 
    for i in range(len(arr)):
        if arr[i] not in map:
            map[arr[i]] = 1
            if arr[i]-1 in map:
                maxstr = max(maxstr, merge(map, arr[i]-1, arr[i]))
            if arr[i]+1 in map:
                maxstr = max(maxstr, merge(map, arr[i], arr[i]+1))
    return maxstr

递归与动态规划---N皇后问题的递归方法和位运算方法
2017年08月15日 21:30:52
阅读数：110
【题目】 
　　N皇后问题是指在N×N的棋盘上要摆N个皇后，要求任何两个皇后不同行、不同列，也不在同一条斜线上。给定一个整数N，返回N个皇后的摆法有多少种。

【基本思路】

1.递归方法。如果在位置（i，j）放置了一个皇后，那么那些位置就不能在放置皇后了呢？

整个 i 行都不能放置
整个 j 行都不能放置
如果位置（a，b）满足 |a - i| = |b - j|，说明（a，b）与（i，j）处在同一条斜线上，也不能放置皇后。
把递归过程设计成逐行放置皇后的方式，可以避开条件 1 的那些不能放置的位置。接下来用一个数组保存已经放置的皇后的位置，假设数组为record，record[i] == k，表示第 i 行的皇后放置在了第 k 列。在递归计算到第 i 行，都要判断该行的每一个位置是否可以放置皇后。

下面是使用python3.5实现的代码。

#N皇后问题
#递归方法。
def queens(n):
    def isValid(record, i, j):
        for k in range(i):
            if record[k] == j or abs(record[k] - j) == abs(i - k):
                return False
        return True

    def process(index, record):       #对棋牌的第index行进行判断
        if index == len(record):
            return 1
        res = 0
        for j in range(len(record)):      #对棋牌的每一列进行判断
            if isValid(record, index, j):
                record[index] = j
                res += process(index+1, record)
        return res


    if n < 1:
        return 0
    record = [0 for i in range(n)]
    return process(0, record)

　接下来介绍位运算的方法。其实位运算的方法的思路也是递归，只不过是使用了位运算进行了加速，将每一个位置能否放置皇后用 0 和 1 来表示。代码如下：

其中upperLim表示的是棋盘的每一列都有皇后放置的情况，也就是N皇后摆放成功的结果。初始值将每一列都设为 1，用作递归终止的条件判断。

colLim表示递归到上一行为止，哪些列已经放置了皇后，放置的用 1 表示，否则用 0 表示。

leftDiaLim表示递归到上一行为止，受已经放置的皇后的左下方斜线的影响而不能放置的位置， 1 表示不能放置，0 表示可以放置。

rightDiaLim表示递归到上一行为止，受已经放置的皇后的右下方斜线的影响而不能放置的位置， 1 表示不能放置，0 表示可以放置。

pos表示当前行在colLim，leftDiaLim，rightDiaLim限制下能放置的位置，1表示可以放置，0表示不可以放置。

mostRightOne表示pos的最右边的 1 的位置。从右到左遍历每一个可以放置皇后的位置。
#使用位运算进行加速的递归方法。
def queens2(n):
    def process2(upperLim, colLim, leftDiaLim, rightDiaLim):
        if colLim == upperLim:
            return 1
        res = 0
        pos = upperLim & ~(colLim | leftDiaLim | rightDiaLim)
        while pos != 0:
            mostRightOne = pos & (~pos + 1)
            pos = pos - mostRightOne
            res += process2(upperLim, colLim | mostRightOne, (leftDiaLim | mostRightOne) << 1, (rightDiaLim | mostRightOne) >> 1)
        return res


    if n < 1 or n > 32:          #位运算的载体是int型变量，只能求解1~32皇后问题
        return 0
    upperLim = -1 if n == 32 else (1<<n) - 1
    return process2(upperLim, 0, 0, 0)