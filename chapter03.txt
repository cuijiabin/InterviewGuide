第3章  二叉树问题
二叉树的前中后序的递归，非递归及Morris遍历
打印二叉树的边界节点
二叉搜索树查找、插入与删除的代码实现
较为直观的打印二叉树
打印二叉树的边界节点
二叉树的序列化和反序列化
在二叉树中找到累加和为指定值的最长路径长度
找到二叉树中的最大搜索二叉子树
二叉树的按层打印和ZigZag打印
寻找搜索二叉树中两个错误的节点
判断t1树是否包含t2树全部的拓扑结构
判断t1树中是否有与t2树拓扑结构完全相同的子树
判断二叉树是否为平衡二叉树
判断数组是否为某搜索二叉树的后序遍历的结果
根据后序数组重建搜索二叉树
判断一棵树是否为搜索二叉树
判断一棵树是否为完全二叉树
通过有序数组生成平衡搜索二叉树
在二叉树中找到两个节点的最近公共节点
二叉树节点间的最大距离
先序，中序，和后序数组两两结合重构二叉树
通过先序和中序数组生成后序数组
统计所有可能的二叉树结构的种数
统计完全二叉树的节点个数


二叉树问题---二叉树的前中后序的递归，非递归及Morris遍历
2017年07月26日 11:12:05
阅读数：236
class TreeNode:
    def __init__(self, x):
        root.val = x
        root.left = None
        root.right = None

创建二叉树
def create_tree(root):
    element = input("Enter a key: ")
    if element == '#':
        root = None
    else:
        root = TreeNode(element)
        root.left = create_tree(root.left)
        root.right = create_tree(root.right)
    return root

前序遍历
def pre_order(root):
    if root:
        print(root.val,end=' ')
        pre_order(root.left)
        pre_order(root.right)

中序遍历
def mid_order(root):
    if root:
        mid_order(root.left)
        print(root.val, end=' ')
        mid_order(root.right)

后序遍历
def post_order(root):
    if root:
        post_order(root.left)
        post_order(root.right)
        print(root.val, end=' ')

非递归前序遍历
def preorder(root):
    if not root:
        return
    stack = []
    while root or len(stack):
        if root:
            stack.append(root)
            print(root.val, end=' ')
            root = root.left
        else:
            root = stack.pop()
            root = root.right

非递归中序遍历
def midorder(root):
    if not root:
        return
    stack = []
    while root or stack:
        if root:
            stack.append(root)
            root = root.left
        else:
            root = stack.pop()
            print(root.val, end=' ')
            root = root.right

非递归后序遍历
def postorder(root):
    if not root:
        return
    stack1 = []
    stack2 = []
    while root or stack1:
        if root:
            stack1.append(root)
            stack2.append(root.val)
            root = root.right
        else:
            root = stack1.pop()
            root = root.left
    while stack2:
        print(stack2.pop(), end=' ')

非递归后序遍历（使用一个栈）
说明：使用一个变量c来记录每次弹出的元素，保证元素不会重复进栈

def postOrder(root):
    if not root:
        return
    stack = []
    stack.append(root)
    c = None
    while stack:
        c = stack[-1]
        if c.left and c.left != root and c.right != root:
            stack.append(c.left)
        elif c.right and c.right != root:
            stack.append(c.right)
        else:
            print(stack.pop().val, end=' ')
            root = c

Morris前序遍历
def morrisPre(root):
    if not root:
        return
    while root:
        cur = root.left
        if cur:
            while cur.right and cur.right != root:
                cur = cur.right
            if not cur.right:
                cur.right = root
                print(root.val, end=' ')
                root = root.left
                continue
            else:
                cur.right = None
        else:
            print(root.val, end=' ')
        root = root.right

Morris中序遍历
def morrisIn(root):
    if not root:
        return
    while root:
        cur = root.left
        if cur:
            while cur.right and cur.right != root:
                cur = cur.right
            if not cur.right:
                cur.right = root
                root = root.left
                continue
            else:
                cur.right = None
        print(root.val, end=' ')
        root = root.right

Morris后序遍历
def morrisPost(root):
    def printRightEdge(root):
        tail = reverseEdge(root)
        cur = tail
        while cur:
            print(cur.val, end=' ')
            cur = cur.right
        reverseEdge(tail)

    def reverseEdge(root):
        pre = None
        while root:
            next = root.right
            root.right = pre
            pre = root
            root = next
        return pre

    if not root:
        return
    head = root
    while root:
        cur = root.left
        if cur:
            while cur.right and cur.right != root:
                cur = cur.right
            if not cur.right:
                cur.right = root
                root = root.left
                continue
            else:
                cur.right = None
                printRightEdge(root.left)
        root = root.right
    printRightEdge(head)

层次遍历
def levelorder(root):
    if not root:
        return
    queue = []
    queue.append(root)
    while queue:
        root = queue.pop(0)
        print(root.val, end=' ')
        if root.left:
            queue.append(root.left)
        if root.right:
            queue.append(root.right)

二叉树问题---打印二叉树的边界节点
2017年07月31日 01:55:42
阅读数：342
问题： 
给定一棵二叉树的头节点，按照如下两种标准分别实现二叉树边界节点的逆时针打印。

标准一：

1.头节点为边界节点
2.叶节点为边界节点
3.如果节点在其所在层中的最左边或最右边，那么也是边界节点

标准二：

1.头节点为边界节点
2.叶节点为边界节点
3.树左边界延伸下去的路径为边界节点
4.树右边界延伸下去的路径为边界节点

#标准一
def printEdge1(root):
    def getHeight(root, height=0):
        if not root:
            return 0
        return max(getHeight(root.left, height+1), getHeight(root.right, height+1)) + 1

    def getMap(root, i, map):
        if not root:
            return
        if map[i][0] == None:
            map[i][0] = root
        map[i][1] = root
        getMap(root.left, i+1, map)
        getMap(root.right, i+1, map)

    def printLeafNotInMap(root, i, map):
        if not root:
            return
        if not root.left and not root.right and root != map[i][0] and \
                root != map[i][1]:
            print(root.val, end=' ')
        printLeafNotInMap(root.left, i+1, map)
        printLeafNotInMap(root.right, i+1, map)

    if not root:
        return
    height = getHeight(root)
    map = [[None for i in range(2)] for j in range(height)]
    getMap(root, 0, map)
    for i in range(len(map)):
        print(map[i][0].val, end=' ')
    printLeafNotInMap(root, 0, map)
    for i in range(len(map)-1, -1, -1):
        if map[i][0] != map[i][1]:
            print(map[i][1].val, end=' ')


#标准二
def printEdge2(root):
    def printLeft(root, isPrint):
        if not root:
            return
        if isPrint or (root.left == None and root.right == None):
            print(root.val, end=' ')
        printLeft(root.left, isPrint)
        printLeft(root.right, bool(isPrint and root.left == None))

    def printRight(root, isPrint):
        if not root:
            return
        printRight(root.left, bool(isPrint and root.right == None))
        printRight(root.right, isPrint)
        if isPrint or (root.left == None and root.right == None):
            print(root.val, end=' ')


    if not root:
        return
    print(root.val, end=' ')
    if root.left and root.right:
        printLeft(root.left, True)
        printRight(root.right, True)
    elif root.left:
        printEdge2(root.left)
    elif root.right:
        printEdge2(root.right)

二叉树问题---二叉搜索树查找、插入与删除的代码实现
2017年07月26日 17:44:42
阅读数：155
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

查找

def Find(root, x):
    if not root:
        print("The number {} is not found".format(x))
        return None
    if root.val == x:
        print("True")
        return root
    elif x < root.val:
        return Find(root.left, x)
    elif x > root.val:
        return Find(root.right, x)

插入

def BSTinsert(root, x):
    if not root:
        root = TreeNode(x)
    elif root.val > x:
        root.left = BSTinsert(root.left, x)
    elif root.val < x:
        root.right = BSTinsert(root.right, x)
    return root

删除

def Delete(root, x):
    if not root:
        raise Exception("Element not found")
    elif root.val > x:
        root.left = Delete(root.left, x)
    elif root.val < x:
        root.right = Delete(root.right, x)
    elif root.left and root.right:
        TmpCell = FindMin(root.right)
        root.val = TmpCell.val
        root.right = Delete(root.right, root.val)
    else:
        if not root.left:
            root = root.right
        else:
            root = root.left
    return root

def FindMin(root):
    if not root:
        return None
    while root.left:
        root = root.left
    return root

二叉树问题---较为直观的打印二叉树
2017年07月31日 01:51:36
阅读数：253

def printTree(root):
    if not root:
        return
    print("Binary Tree: ")
    printInOrder(root, 0, 'H', 10)

def printInOrder(root, height, preStr, length):
    if not root:
        return
    printInOrder(root.right, height+1, 'v', length)
    string = preStr + root.val + preStr
    leftLen = (length - len(string)) // 2
    rightLen = length - len(string)- leftLen
    res = " "*leftLen + string + " "*rightLen
    print(" "*height*length + res)
    printInOrder(root.left, height+1, '^', length)

二叉树问题---打印二叉树的边界节点
2017年07月31日 01:55:42
阅读数：342
问题： 
给定一棵二叉树的头节点，按照如下两种标准分别实现二叉树边界节点的逆时针打印。

标准一：

1.头节点为边界节点
2.叶节点为边界节点
3.如果节点在其所在层中的最左边或最右边，那么也是边界节点

标准二：

1.头节点为边界节点
2.叶节点为边界节点
3.树左边界延伸下去的路径为边界节点
4.树右边界延伸下去的路径为边界节点

#标准一
def printEdge1(root):
    def getHeight(root, height=0):
        if not root:
            return 0
        return max(getHeight(root.left, height+1), getHeight(root.right, height+1)) + 1

    def getMap(root, i, map):
        if not root:
            return
        if map[i][0] == None:
            map[i][0] = root
        map[i][1] = root
        getMap(root.left, i+1, map)
        getMap(root.right, i+1, map)

    def printLeafNotInMap(root, i, map):
        if not root:
            return
        if not root.left and not root.right and root != map[i][0] and \
                root != map[i][1]:
            print(root.val, end=' ')
        printLeafNotInMap(root.left, i+1, map)
        printLeafNotInMap(root.right, i+1, map)

    if not root:
        return
    height = getHeight(root)
    map = [[None for i in range(2)] for j in range(height)]
    getMap(root, 0, map)
    for i in range(len(map)):
        print(map[i][0].val, end=' ')
    printLeafNotInMap(root, 0, map)
    for i in range(len(map)-1, -1, -1):
        if map[i][0] != map[i][1]:
            print(map[i][1].val, end=' ')


#标准二
def printEdge2(root):
    def printLeft(root, isPrint):
        if not root:
            return
        if isPrint or (root.left == None and root.right == None):
            print(root.val, end=' ')
        printLeft(root.left, isPrint)
        printLeft(root.right, bool(isPrint and root.left == None))

    def printRight(root, isPrint):
        if not root:
            return
        printRight(root.left, bool(isPrint and root.right == None))
        printRight(root.right, isPrint)
        if isPrint or (root.left == None and root.right == None):
            print(root.val, end=' ')


    if not root:
        return
    print(root.val, end=' ')
    if root.left and root.right:
        printLeft(root.left, True)
        printRight(root.right, True)
    elif root.left:
        printEdge2(root.left)
    elif root.right:
        printEdge2(root.right)


二叉树问题---二叉树的序列化和反序列化
2017年07月31日 01:57:42
阅读数：327
说明： 
二叉树被记录成文件的过程叫作二叉树的序列化，通过文件内容重建原来二叉树的过程叫作二叉树的反序列化

#二叉树的序列化和反序列化（先序）
def serialByPre(root):
    if not root:
        return '#!'
    res = root.val + '!'
    res += serialByPre(root.left)
    res += serialByPre(root.right)
    return res

def reconByPreString(preStr):
    def reconPreOrder(values):
        key = values.pop(0)
        if key == '#':
            return None
        root = TreeNode(key)
        root.left = reconPreOrder(values)
        root.right = reconPreOrder(values)
        return root

    values = preStr.split('!')
    return reconPreOrder(values)


#二叉树的序列化和反序列化（层次）
def serialByLevel(root):
    if root == '#':
        return '#!'
    stack = []
    stack.append(root)
    res = root.val + '!'
    while stack:
        root = stack.pop()
        if root.left:
            res += root.left.val + '!'
            stack.append(root.left)
        else:
            res += '#!'
        if root.right:
            res += root.right.val + '!'
            stack.append(root.right)
        else:
            res += '#!'
    return res

def reconByLevelString(levStr):
    def generateNode(key):
        if key == '#':
            return None
        return TreeNode(key)

    values = levStr.split('!')
    head = generateNode(values.pop(0))
    queue = []
    if head:
        queue.append(head)
    while queue:
        root = queue.pop(0)
        root.left = generateNode(values.pop(0))
        root.right = generateNode(values.pop(0))
        if root.left:
            queue.append(root.left)
        if root.right:
            queue.append(root.right)
    return head


二叉树问题---在二叉树中找到累加和为指定值的最长路径长度
2017年07月31日 02:09:11
阅读数：437
【题目】

　　给定一棵二叉树的头节点head和一个32位整数sum，二叉树节点值类型为整型，求累加和为sum的最长路径长度。路径是指从某个节点往下，每次最多选择一个孩子节点或者不选所组成的节点链。

【基本思路】

生成哈希表map，map的作用是记录从head开始的一条路径上的累加和，其中key值表示某个累加和，value表示累加和出现的最早层数。例如，假设某个路径上的节点值为[1, 2, 3, -3, 5]，那么map中的记录为[1 : 1, 3 : 2, 6 : 3, 3 : 2, 8 : 5]，注意value表示累加和出现的最早层数，所以map中的第四个记录和第二个记录相同，所以第四条记录其实不必要插入，map的记录应该为[1 : 1, 3 : 2, 6 : 3, 8 : 5]。

在map中添加（0， 0）记录，表示累加和 0 不用任何节点就可以得到。先序遍历二叉树，假设遍历到的当前位置是cur，层数为level，此时的累加和应为cur的父节点的累加和presum加上cur节点的值，即cursum = presum + cur.val。如果（presum + cur.val, level）这个记录已经存在于map中，则不需要再次插入。接下来，我们要做的工作是，判断是否有以cur结尾的路径的累加和 等于题目所给的指定值sum。只需要在map中寻找是否有cursum - sum这个记录即可，如果存在这个记录的话 level - map[cursum - sum]就是满足条件的一个路径长度，使用全局变量更新路径的最大值。

需要注意的是，在遍历完二叉树的子树要返回到cur的父节点是，需要将map中该节点的记录删去（如果之前插入的话），否则可能出现路径不是自顶向下的情况。

下面是使用python3.5实现的代码

def getMaxLength(root, K):
    def getLengthByPreOrder(root, K, preSum, level, length, map):
        if not root:
            return length
        curSum = preSum + int(root.val)
        if curSum not in map:
            map[curSum] = level
        if curSum-K in map:
            length = max(level - map.get(curSum-K), length)
        length = getLengthByPreOrder(root.left, K, curSum, level+1, length, map)
        length = getLengthByPreOrder(root.right, K, curSum, level+1, length, map)
        if level == map.get(curSum):
            map.pop(curSum)
        return length


    if not root:
        return
    map = {}
    map[0] = 0
    return getLengthByPreOrder(root, K, 0, 1, 0, map)

二叉树问题---找到二叉树中的最大搜索二叉子树
2017年07月31日 02:14:46
阅读数：241
题目： 
　　给定一棵二叉树的头节点head，已知其中所有节点的值都不一样，找到含有节点最多的搜索二叉树，并返回这棵子树的头节点。(注意子树的概念)

基本思路： 
以节点node为头的树中，最大的搜索二叉树只可能来自以下的两种情况：　　

node的左子树和右子树都是搜索二叉树，并且左子树的最大值小于node，右子树的最小值大于node，此时，以node为头的整棵树都是搜索二叉树。
如果不满足情况１，那么最大的搜索二叉树来自node左子树的最大搜索二叉子树或者node右子树的最大搜索二叉子树
整体过程是二叉树的后序遍历，过程如下：

遍历到当前节点cur时，先遍历左子树收集四个信息，分别是左子树上最大搜索二叉树的头节点(lBST)，节点数(lSize)，最大值(lMax)和最小值(lMin)。再遍历右子树，也收集四个信息rBST, rSize, rMax, rMin。
根据步骤一收集的信息，判断是否满足情况１，如果满足，返回cur。如果不满足，返回lBST, rBST中最大的一个。
def biggestSubBST(root):
    def findBiggestSubBST(root, record):
        if not root:
            record[0] = 0
            record[1] = sys.maxsize
            record[2] = -sys.maxsize
            return None
        leftBST = findBiggestSubBST(root.left, record)
        leftSize = record[0]
        leftMin = record[1]
        leftMax = record[2]
        rightBST = findBiggestSubBST(root.right, record)
        rightSize = record[0]
        rightMin = record[1]
        rightMax = record[2]
        record[1] = min(leftMin, int(root.val))
        record[2] = max(rightMax, int(root.val))
        if leftBST == root.left and rightBST == root.right and \
                rightMin > int(root.val) and leftMax < int(root.val):
            record[0] = leftSize + rightSize + 1
            return root
        record[0] = max(leftSize, rightSize)
        if leftSize > rightSize:
            return leftBST
        else:
            return rightBST

    if not root:
        return
    record = [0 for i in range(3)]
    return findBiggestSubBST(root, record)

二叉树问题---二叉树的按层打印和ZigZag打印
2017年07月31日 02:17:27
阅读数：236
#按层打印
def printByLevel(root):
    if not root:
        return
    print("Print binary tree by level")
    queue = []
    queue.append(root)
    last = root
    level = 1
    print("Level " + str(level) + ':', end=' ')
    while queue:
        root = queue.pop(0)
        print(root.val, end=' ')
        if root.left:
            nlast = root.left
            queue.append(root.left)
        if root.right:
            nlast = root.right
            queue.append(root.right)
        if root == last and queue:
            last = nlast
            print()
            level += 1
            print("Level " + str(level) + ":", end=' ')


#ZigZag打印
def printByZigZag(root):
    if not root:
        return
    print("Print binary tree by ZigZag")
    deque = []
    deque.append(root)
    islr = True
    last = root
    nlast = None
    level = 1
    print("Level " + str(level) + ":", end=' ')
    while deque:
        if islr:
            root = deque.pop(0)
            print(root.val, end=' ')
            if root.left:
                if nlast == None:
                    nlast = root.left
                deque.append(root.left)
            if root.right:
                if nlast == None:
                    nlast = root.right
                deque.append(root.right)
        else:
            root = deque.pop()
            print(root.val, end=' ')
            if root.right:
                if nlast == None:
                    nlast = root.right
                deque.insert(0, root.right)
            if root.left:
                if nlast == None:
                    nlast = root.left
                deque.insert(0, root.left)
        if root == last and deque:
            islr = not islr
            last = nlast
            nlast = None
            print()
            level += 1
            print("Level " + str(level) + ":", end=' ')


二叉树问题---寻找搜索二叉树中两个错误的节点
2017年07月31日 02:50:49
阅读数：207
题目： 
一棵二叉树原本是搜索二叉树，但是其中有两个节点调换了位置，使得这棵二叉树不再是搜索二叉树，请找出这两个错误的节点并返回。已知二叉树中所有节点的值都不一样，给定二叉树的头节点，返回一个长度为2的二叉树节点类型的数组errs。

def getTwoErrorNode(root):
    errs = [None for i in range(2)]
    if not root:
        return errs
    stack = []
    pre = None
    while root or stack:
        if root:
            stack.append(root)
            root = root.left
        else:
            root = stack.pop()
            if pre and pre.val > root.val:
                if errs[0] == None:
                    errs[0] = pre
                errs[1] = root
            pre = root
            root = root.right
    return errs

二叉树问题---判断t1树是否包含t2树全部的拓扑结构
2017年07月31日 02:52:49
阅读数：312
#判断t1树是否包含t2树全部的拓扑结构
def isContain(t1, t2):
    def check(t1, t2):
        if not t2:
            return True
        if not t1 or t1.val != t2.val:
            return False
        return check(t1.left, t2.left) and check(t1.right, t2.right)

    return check(t1, t2) or isContain(t1.left, t2) or isContain(t1.right, t2)


二叉树问题---判断t1树中是否有与t2树拓扑结构完全相同的子树
2017年08月02日 01:57:23
阅读数：236
说明： 
两种方法： 
方法1： 
对于t1的每棵子树，都去判断是否与t2树的拓扑结构完全一样，这个过程的实践复杂度是O(M),t1的子树共有N棵，所以时间复杂度为O(M*N) 
方法2： 
首先把t1树和t2树按照先序遍历的方式序列化，之后用KMP算法去判断t2Str是否是t1Str的子串即可。t1的序列化的过程是O(N)，t2的序列化是O(M)，KMP算法解决匹配问题的复杂度是O(M+N)，所以总体时间复杂度是O(M+N)

#方法1的实现
def isSubTopoBST2(t1, t2):
    def isTopoBST2(t1, t2):
        if not t1 and not t2:
            return True
        if not t1 or not t2 or t1.val != t2.val:
            return False
        return isTopoBST2(t1.left, t2.left) and isTopoBST2(t1.right, t2.right)

    if not t1 or not t2:
        return False
    return isTopoBST2(t1, t2) or isSubTopoBST2(t1.left, t2) or isSubTopoBST2(t1.right, t2)

#方法2的实现
def isSubTopoBST(t1, t2):
    def serialTreeByPre(root):
        if not root:
            return '#!'
        res = root.val + '!'
        res += serialTreeByPre(root.left)
        res += serialTreeByPre(root.right)
        return res

    def isTopoBST(s, m):
        if not s or not m or len(s) < len(m) or len(m) < 1:
            return False
        mi = 0
        si = 0
        nextarr = getNextArray(m)
        while mi < len(m) and si < len(s):
            if s[si] == m[mi]:
                mi += 1
                si += 1
            elif nextarr[mi] == -1:
                si += 1
            else:
                mi = nextarr[mi]
        if mi == len(m):
            return True
        else:
            return False

    def getNextArray(m):
        if len(m) == 1:
            return -1
        nextarr = [None for i in range(len(m))]
        nextarr[0] = -1
        nextarr[1] = 0
        pos = 2
        cn = 0
        while pos < len(m):
            if m[pos-1] == m[cn]:
                nextarr[pos] = cn + 1
                pos += 1
                cn += 1
            elif cn > 0:
                cn = nextarr[cn]
            else:
                nextarr[pos] = 0
                pos += 1
        return nextarr

    if not t1 or not t2:
        return False
    str1 = serialTreeByPre(t1)
    str2 = serialTreeByPre(t2)
    arr1 = str1.split('!')
    arr1.pop()
    arr2 = str2.split('!')
    arr2.pop()
    return isTopoBST(arr1, arr2)

二叉树问题---判断二叉树是否为平衡二叉树
2017年08月02日 01:59:39
阅读数：208
#判断二叉树是否为平衡二叉树
def isBalance(root):
    def judgeIsBalance(root, level, res):
        if not root:
            return level
        lH = judgeIsBalance(root.left , level+1, res)
        if res[0] == False:
            return level
        rH = judgeIsBalance(root.right , level+1, res)
        if res[0] == False:
            return level
        if abs(lH - rH) > 1:
            res[0] = False
        return max(lH, rH)

    if not root:
        return True
    res = [True]
    judgeIsBalance(root, 1, res)
    return res[0]

二叉树问题---判断数组是否为某搜索二叉树的后序遍历的结果
2017年08月02日 02:00:50
阅读数：115
#判断数组是否为某搜索二叉树的后序遍历的结果
def isPostArray(arr):
    def isPost(arr, start, end):
        if start == end:
            return True
        leftEnd = None
        rightStart = None
        for i in range(end):
            if arr[i] < arr[end]:
                leftEnd = i
        for i in range(end-1, -1, -1):
            if arr[i] > arr[end]:
                rightStart = i
        if not leftEnd or not rightStart:
            return isPost(arr, start, end-1)
        if leftEnd != rightStart-1:
            return False
        return isPost(arr, start, leftEnd) and isPost(arr, rightStart, end-1)

    if arr == None or len(arr) == 0:
        return False
    return isPost(arr, 0, len(arr)-1)

二叉树问题---根据后序数组重建搜索二叉树
2017年08月02日 02:01:37
阅读数：108
#根据后序数组重建搜索二叉树
def postArrayToBST(arr):
    def arrayToBST(arr, start, end):
        if start > end:
            return None
        root = TreeNode(arr[end])
        leftEnd = -1
        rightStart = end
        for i in range(end):
            if arr[i] < arr[end]:
                leftEnd = i
        for i in range(end-1, -1, -1):
            if arr[i] > arr[end]:
                rightStart = i
        root.left = arrayToBST(arr, start, leftEnd)
        root.right = arrayToBST(arr, rightStart, end-1)
        return root


    if arr == None:
        return None
    return arrayToBST(arr, 0, len(arr)-1)

二叉树问题---判断一棵树是否为搜索二叉树
2017年08月02日 02:02:37
阅读数：120
#判断一棵树是否为搜索二叉树
def isBST(root):
    if not root:
        return True
    res = True
    pre = None
    cur1 = root
    cur2 = None
    while cur1:
        cur2 = cur1.left
        if cur2:
            while cur2.right and cur2.right != cur1:
                cur2 = cur2.right
            if cur2.right == None:
                cur2.right = cur1
                cur1 = cur1.left
                continue
            else:
                cur2.right = None
        if pre and int(pre.val) > int(cur1.val):
            res = False
        pre = cur1
        cur1 = cur1.right
    return res

二叉树问题---判断一棵树是否为完全二叉树
2017年08月02日 02:03:12
阅读数：140
#判断一棵树是否为完全二叉树
def isCBT(root):
    if not root:
        return True
    isLeaf = False
    queue = []
    queue.append(root)
    while queue:
        root = queue.pop(0)
        left = root.left
        right = root.right
        if (not left and right) or (isLeaf and (left  or right)):
            return False
        if left:
            queue.append(left)
        if right:
            queue.append(right)
        else:
            isLeaf = True
    return True


二叉树问题---通过有序数组生成平衡搜索二叉树
2017年08月02日 02:03:54
阅读数：175
#通过有序数组生成平衡搜索二叉树
def generateTree(arr):
    def generate(arr, start, end):
        if start > end:
            return None
        center = (start + end) // 2
        head = TreeNode(arr[center])
        head.left = generate(arr, start, center-1)
        head.right = generate(arr, center+1, end)
        return head

    if not arr or len(arr) == 0:
        return None
    return generate(arr, 0, len(arr)-1)

二叉树问题---在二叉树中找到两个节点的最近公共节点
2017年08月11日 22:45:28
阅读数：133
问题： 
　　给定一棵二叉树的头节点head，以及这棵树中的两个节点o1和o2，请返回o1和o2的最近公共祖先节点

基本思路：

　　后序遍历二叉树，假设遍历到的当前节点为cur，首先依次遍历它的左孩子和右孩子，此时可能发生以下的四种情景：

如果发现cur等于None，或者等于o1或者等于o2，返回cur
如果左孩子和右孩子都为空，说明cur整棵子树上没有出现过o1和o2，返回None
如果左孩子和右孩子都不为空，说明左子树中发现过o1或者o2，右子树中发现过o2或者o1，此时cur就是这两个节点的最近公共节点，返回cur
如果左孩子和右孩子一个为空一个不为空，此时不为空的节点要么是o1或o2中的一个，要么已经是o1和o2的公共节点，返回此节点即可
#python3.5
#在二叉树中找到两个节点的最近公共节点
def lowestAncestor(head, o1, o2):
    if head == None or head == o1 or head == o2:
        return head
    left = lowestAncestor(head.left, o1, o2)
    right = lowsetAncestor(head.right, o1, o2)
    if left and right:
        return head
    return left if left else right

二叉树问题---二叉树节点间的最大距离
2017年08月11日 23:06:26
阅读数：128
问题： 
　　从二叉树节点Ａ出发，可以向上或者向下走，但沿途的节点只能经过一次，当到达节点Ｂ时，路径上的节点数叫做Ａ到Ｂ的距离。

基本思路： 
一个以ｈ为头的树上，最大的距离只可能来自以下三种情况：

ｈ左子树上的最大距离
ｈ右子树上的最大距离
ｈ左子树上离h.left最远的距离＋１＋ｈ右子树上离h.right最远的距离
三个值中的最大值就是整棵ｈ树中最远的距离

#python3.5
#二叉树节点间的最大距离
def maxDistance(head):
    def posOrder(head, record):
        if head == None:
            record[0] = 0
            return 0
        leftMax = posOrder(head.left, record)
        maxfromLeft = record[0]
        rightMax = posOrder(head.right, record)
        maxfromRight = record[0]
        record[0] = max(maxfromLeft, maxfromRight) + 1
        curMax = maxfromLeft + maxfromRight + 1
        return max(max(leftMax, rightMax),curMax)

    if head == None:
        return 0
    record = [None]　　　#如果使用一个变量，则为值传递，record值不会变
    return posOrder(head, record)


二叉树问题---先序，中序，和后序数组两两结合重构二叉树
2017年08月11日 23:13:42
阅读数：113
注意： 
　　如果一棵二叉树除叶节点之外，其他的节点都有左孩子和右孩子，这样的树才能被先序和后序数组重建

#python3.5
#先序，中序数组重构二叉树
def preInToTree(pre, mid):
    def preIn(pre, pi, pj, mid, mi, mj, map):
        if pi > pj:
            return None
        head = TreeNode(pre[pi])
        index = map.get(pre[pi])
        head.left = preIn(pre, pi+1, pi+index-mi, mid, mi, index-1, map)
        head.right = preIn(pre, pi+index-mi+1, pj, mid, index+1, mj, map)
        return head

    if pre == None or mid == None or len(pre) != len(mid):
        return None
    map = {}
    for i in range(len(mid)):
        map[mid[i]] = i
    return preIn(pre, 0, len(pre)-1, mid, 0, len(mid)-1, map)

#中序，后序数组重构二叉树
def inPosToTree(mid, pos):
    def inPos(mid, mi, mj, pos, si, sj, map):
        if si > sj:
            return None
        head = TreeNode(pos[sj])
        index = map.get(pos[sj])
        head.left = inPos(mid, mi, index-1, pos, si, si+index-mi-1, map)
        head.right = inPos(mid, index+1, mj, pos, si+index-mi, sj-1, map)
        return head


    if mid == None or pos == None or len(mid) != len(pos):
        return None
    map = {}
    for i in range(len(mid)):
        map[mid[i]] = i
    return inPos(mid, 0, len(mid)-1, pos, 0, len(pos)-1, map)

#先序，后序数组重构二叉树
#一棵二叉树除叶子节点外，其他所有的节点都有左孩子和右孩子，才能被先序和后序数组重构出来
def prePosToTree(pre, pos):
    def prePos(pre, pi, pj, pos, si, sj, map):
        head = TreeNode(pre[pi])
        if pi == pj:
            return head
        pi += 1
        index = map.get(pre[pi])
        head.left = prePos(pre, pi, pi+index-si, pos, si, index, map)
        head.right = prePos(pre, pi+index-si+1, pj, pos, index+1, sj-1, map)
        return head

    if pre == None or pos == None or len(pre) != len(pos):
        return None
    map = {}
    for i in range(len(pos)):
        map[pos[i]] = i
    return prePos(pre, 0, len(pre)-1, pos, 0, len(pos)-1, map)

二叉树问题---通过先序和中序数组生成后序数组
2017年08月11日 23:20:23
阅读数：183
【基本思路】

　　根据当前的先序和中序数组，设置后序数组最右边的值，然后划分出左子树的先序、中序数组，以及右子树的先序、中序数组，先根据右子树的划分设置好后序数组，再根据左子树的划分，从右边到左边依次设置好后序数组的全部位置

下面是使用python3.5实现的代码

#python3.5
#通过先序和中序数组生成后序数组
def preInToPos(pre, mid):
    def preInPos(pre, pi, pj, mid, mi, mj, pos, sj, map):
        if pi > pj:
            return sj
        pos[sj] = pre[pi]
        sj -= 1
        index = map.get(pre[pi])
        sj = preInPos(pre, pi+index-mi+1, pj, mid, index+1, mj, pos, sj, map)
        return preInPos(pre, pi+1, pi+index-mi, mid, mi, index-1, pos, sj, map)


    if pre == None or mid == None:
        return []
    pos = [None for i in range(len(mid))]
    map = {}
    for i in range(len(mid)):
        map[mid[i]] = i
    preInPos(pre, 0, len(pre)-1, mid, 0, len(mid)-1, pos, len(mid)-1, map)
    return pos

二叉树问题---统计所有可能的二叉树结构的种数
2017年08月11日 23:35:00
阅读数：172
【题目】

　　给定一个整数Ｎ，如果N<1，代表空树结构，否则代表中序遍历的结果为｛１，２，３，…，Ｎ｝。请返回可能的二叉树结构有多少。

【基本思路】

　　假设num[n]代表ｎ个节点的搜索二叉树有多少种可能。假设序列｛1 , …, i , … , N｝，如果以ｉ作为头结点，ｉ的左子树有i-1个节点，所以可能的结构有num[i-1]种，右子树有N-i个节点，所以有num[N-i]种可能，故以ｉ作为头结点的可能的结构的种数为num[i-1]*num[N-i]。 
　　把从１到Ｎ分别作为头节点，所有可能的结构加起来就是答案，利用动态规划加速运算。

下面是使用python3.5实现的代码

#统计所有可能的二叉树结构的种数
def allNum(n):
    if n < 2:
        return 1
    num = [0 for i in range(n+1)]
    num[0] = 1
    for i in range(1, n+1):
        for j in range(1, i+1):
            num[i] += num[j-1] * num[i-j]
    return num[n]


二叉树问题---统计完全二叉树的节点个数
2017年08月11日 23:46:47
阅读数：256
【基本思路】

　　可以利用完全二叉树的性质，首先判断头节点的右子树的最左节点是否和头节点的最左节点在同一层。 
　　如果在的话，说明头节点的左子树是一棵满二叉树，可以用公式计算出左子树的节点个数，再加上头节点，也就是(２^h-1)+1，接下来再计算右子树的个数，可以用递归的方式求出来。 
　　同理，如果头节点的右子树的最左节点和头节点的最左节点不在同一层，则右子树是一棵满二叉树，可以用公式计算出右子树的节点个数，再加上头节点，也就是(２^(h-1)-1)+1，接下来再计算左子树的个数，可以用递归的方式求出来。

#python3.5
#统计完全二叉树的节点个数
def nodeNum(head):
    def getHeight(head, level):
        while head:
            level += 1
            head = head.left
        return level-1

    def bs(head, level, height):
        if level == height:
            return 1
        h = getHeight(head.right, level+1)
        if h == height:   　　　 #注意位运算符的优先级小于四则运算
            return (1 << (height-level)) + bs(head.right, level+1, height)
        else:
            return (1 << (height-level-1)) + bs(head.left, level+1, height)



    if head == None:
        return 0
    height = getHeight(head, 1)
    return bs(head, 1, height)