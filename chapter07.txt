第7章  位运算
不用额外变量交换两个整数的值
只使用位运算实现整数的加减乘除
计算整数的Ｎ次方
不用任何比较判断找出两个数中的最大值
整数的二进制表达中有多少个1
在其他数都出现偶数次的数组中找到出现奇数次的数
在其他数都出现k次的数组中找到只出现一次的数

位运算---不用额外变量交换两个整数的值
2017年09月04日 23:13:19
阅读数：138
【题目】

　　如何不用任何额外变量交换两个整数的值

【基本思路】

　　如果给定整数a和b使用如下三行代码即可交换a和b的值：

　　a = a ^ b
　　b = a ^ b
　　a = a ^ b

　如何理解这三行代码的具体功能呢？首先要理解关于异或运算的特点：

假设a异或b的结果为c，c就是a整数位信息和b整数位信息的所有不同的信息。比如：a= 4 = 100, b = 3 = 011, a ^ b = 111.

a ^ c的结果就是b。比如：a = 4 = 100, c = 111, a ^ c = 011 = 3 = b

b ^ c的结果就是a。比如：b = 3 = 011, c = 111, b ^ c = 100 = 4 = a

再看上述代码，第一行的计算结果实际上就是c；第二行用第一行的结果异或b，就是相当于c ^ b，所以结果就是a，把这个值赋给b；第三行再用第一行的结果异或b，但此时b已经是a了，所以相当于c ^ a，结果为b赋给a，此时a和b就交换了位置。

位运算---只使用位运算实现整数的加减乘除
2017年09月06日 13:39:04
阅读数：160
【题目】

　　给定两个32位整数a和b，可正、可负、可0.不能使用算术运算符，分别实现a和b的加减乘除。

【要求】

　　如果给定的a和b执行加减乘除的某些结果本来就会导致数据的溢出，那么你实现的函数不必对那些结果负责。

【基本思路】

　加法运算

　　使用位运算实现加法运算主要分为两个部分。先计算完全不考虑进位进行相加的结果，再计算只考虑进位的产生值。将两个结果相加就是最终的结果。

　　例如： 
　　a:　　　　001010101 
　　b:　　　　000101111

首先不考虑进位进行相加，结果为001111010，该结果其实就是a ^ b。

再考虑进位的产生值，结果为000001010，该结果其实就是(a & b)<< 1。

将1、2产生的结果再相加，此时依然要考虑两部分：不考虑进位和只考虑进位。

一直重复上述步骤，直到进位产生的值全部消失。

下面是使用c++实现的代码。

int add(int a, int b)
{
    int sum = a;
    while(b != 0)
    {
        sum = a ^ b;
        b = (a & b) << 1;
        a = sum;
    }
    return sum;
}

　减法运算

　　实现a - b只要实现a + (-b)即可。所以只要将a和b的相反数调用add函数就行。根据二进制数在机器中表达的规则，得到一个数的相反数，就是这个数的二进制数表达取反加1（补码）的结果。代码如下：

int minus1(int a, int b)
{
    return add(a, add(~b, 1));
}

　乘法运算

　　用位运算实现乘法运算。a × b的结果可以写成 a∗20∗b0+a∗21∗b1+...a∗2i∗bi+...a∗231∗b31. 其中bi为0或1表示整数b的二进制表达中第i位的值（从右往左数）。该过程有点类似于求整数的N次方问题。具体实现参照如下代码：

int multi(int a, int b)
{
    int res = 0;
    while(b != 0)
    {
        if(b & 1 == 1)
            res = add(res, a);
        a <<= 1;
        b >>= 1;
    }
    return res;
}

　除法运算

　　用位运算实现除法运算其实就是乘法的逆运算。定义 res 表示除法的结果。首先将a向右移位31位，然后看能不能容下b，如果能，说明a/231可以包含一个b，等价于a可以包含一个b∗231，令res的第31位为1，此时a的值应该为a−b∗231；如果不能容下b，令res的第31位为0，a的值不变；接下来将a向右移位30位是否能容下b……重复步骤直到a−b∗2i=0。 
　　以上过程只适用于a和b都不是负数的情况下，当a或b为负数时，可以先将a和b转成正数，计算完之后再判断res的真实符号就行。 
　　除法实现到这一步已经可以解决绝大多数情况了。但是我们知道，32位最小整数的绝对值要比最大整数大，所以如果a或b等于最小值，是不能转换成相对应的正数的。这时候需要分情况考虑：

如果a和b都为最小值，直接返回1

如果a不为最小值，而b为最小值，那么a/b = 0，直接返回0

如果a为最小值，而b不为最小值。这时我们对a无能为力，但是我们可以让a增大一点点，计算出一个结果然后再修正一下就可以得到最终的结果。处理过程如下：

　　<1>计算(a+1)/b，结果记为c 
　　<2>计算c∗b 
　　<3>计算(a−c∗b)/b，结果记为rest 
　　<4>计算c+rest
代码实现如下：


int divide(int a, int b)
{
    if(b == 0)
        cout<<"Input Error!"<<endl;
    else if(a == INT_MIN && b == INT_MIN)
        return 1;
    else if(b == INT_MIN)
        return 0;
    else if(a == INT_MIN)
    {    
        int c = div(a+1, b);
        return add(c, div(minus1(a, multi(c, b)), b));
    }
    else
        return div(a, b);
}


int div(int a, int b)
{
    a = a >= 0? a : add(~a, 1);
    b = b >= 0? b : add(~b, 1);
    int res = 0;
    for(int i=31; i>-1; i=minus1(i, 1))
    {
        if((a>>i) >= b)
        {
            res = res | (1<<i);
            a = minus1(a, b << i);
        }
    }
    return a >= 0 && b >= 0? add(~res, 1) : res;
}

位运算---计算整数的Ｎ次方
2017年09月06日 19:53:55
阅读数：157
为了表述方便，现在使用例子来说明。

假设一个整数是10，如何快速的求解10的75次方。

75的二进制形式为1001011.

10的75次方 = 1064∗108∗102∗101
在这个过程中，我们先求出101，然后根据101求出102，再根据102求出104，……，最后再根据1032求出1064，即75的二进制形式总共有多少位，我们就使用几次乘法。

下面是使用ｃ++实现的代码：

int power(int a,int p)
{
    int res = 1;
    while(p != 0)
    {
        if(p & 1 == 1)
        {
            res = res * a;
        }
        p >>= 1;
        a = a * a;
    }
    return res;
}

位运算---不用任何比较判断找出两个数中的最大值
2017年09月06日 20:44:17
阅读数：387
【题目】

　　给定两个32位整数a和b，返回a和b中较大的一个。要求不能使用比较判断。

【基本思路】

　方法一。得到a - b的符号就可以知道a和b哪一个大了。具体过程参照如下代码：


int getMax1(int a, int b)
{
    int c = a - b;
    int scA = sign(c);
    int scB = flip(scA);
    return a * scA + b * scB;
}


int flip(int n)
{
    return n ^ 1;
}

int sign(int n)
{
    return flip(n>>31 & 1);
}

　　其中sign函数的功能是返回整数n的符号，正数和0则返回1，负数返回0（在二进制表达中符号位0表示正，1表示负，注意不要搞混）。flip函数的功能是：如果n为0返回1，如果n为1返回0.

　方法二。在方法一中存在一定的局限性，那就是如果a - b的值发生溢出，返回的结果就会不正确。方法二能很好的解决这个 问题，首先看如下的代码：

int getMax2(int a, int b)
{
    int sa = sign(a);
    int sb = sign(b);
    int sc = sign(a - b);
    int difSab = sa ^ sb;
    int sameSab = flip(difSab);
    int returnA = sa * difSab + sc * sameSab;
    int returnB = flip(returnA);
    return a * returnA + b * returnB;
}

简单解释一下。 
如果a和b的符号不同（difSab = 1, sameSab = 0），则有：

如果a为0或正，那么b为负（sa = 1, sb = 0），应该返回a

如果b为0或正，那么a为负（sb = 1, sa = 0），应该返回b

如果a和b的符号相同（difSab = 0, sameSab = 0），此时一定不会发生溢出:

如果a - b为0或者为正(sc = 1)，返回a
如果a - b为负(sc = 0 )，返回b

位运算---整数的二进制表达中有多少个1
2017年09月06日 22:33:10
阅读数：106
【题目】

　　给定一个32位整数n，可正、可负、可0.返回该整数二进制表达中1的个数。

【基本思路】

　　最简单的方法。整数n每次进行无符号右移一位，检查最右边的bit是否为1来进行统计即可。

下面是使用c++实现的代码：

int count1(int n)
{
    unsigned int num = (unsigned)n;
    int res = 0;
    while(num != 0)
    {
        res += num & 1;
        num = num >> 1;
    }
    return res;
}

上述方法最坏情况下要进行32次循环，接下来介绍两个循环次数只与1的个数有关的解法。

int count2(int n)
{
    int res = 0;
    while(n != 0)
    {
        n -= n & (~n + 1);
        res++;
    }
    return res;
}

每次进行n -= n & (~n + 1)操作时就是移除最右边1的过程。n & (~n + 1)的含义就是得到n中最右边的1。例如，n = 01000100, n & (~n + 1) = 00000100, n - n & (~n + 1) = 01000000。

int count3(int n)
{
    int res = 0;
    while(n != 0)
    {
        n = n & (n-1);
        res++;
    }
    return res;
}

n = n & (n-1)这也是移除最右侧1的过程。例如： n = 01000100, n-1 = 01000011, n & (n-1) = 01000000。


位运算---在其他数都出现偶数次的数组中找到出现奇数次的数
2017年09月07日 23:37:39
阅读数：98
【题目】

　　给定一个数组arr，其中只有一个数出现了奇数次，其他数都出现了偶数次，打印这个数。

【进阶问题】

　　有两个数出现了奇数次，其他数出现了偶数次，打印这两个数。

【要求】

　　时间复杂度O(N)，空间复杂度(1)。 
　　 
【基本思路】

　　首先需要知道，整数n与0异或的结果是n，整数n与整数n异或的结果是0；同时，异或满足交换律和结合律。 
　　知道上述的内容，解决这道题就很容易了。如果n出现了偶数次，那么，所有的n异或完后一定为0；如果n出现了奇数次，那么所有的n异或完后一定为n。即使数组中同一个数不是连着出现的，根据异或的交换律和结合律，我们知道，数组中顺序的改变不会影响结果。所以，这道题的步骤就是：先申请一个整型变量记为e，初始化为0，让e去和数组中每一个元素进行异或，最终的e就是答案。

下面是使用c++实现的代码：

int printOddTimesNum1(vector<int> arr)
{
    int e = 0;
    for(int i=0; i<arr.size(); i++)
    {
        e = e ^ arr[i];
    }
    return e;
}

　　进阶问题。原理同上，首先申请变量e，初始化为0，去异或数组中每一个元素，e最终的结果就是两个出现奇数次的数的异或，记为a ^ b。此时我们要做的就是，先单独求出一个a或b，然后就可以根据e ^ a(或者e ^ b)求出另一个结果。怎么做呢？因为e = a ^ b，所以 e 的二进制表达中为 1 的位置就是 a 与 b 二进制表达中不同的位置，我们找到这样的一个位置。我们再次遍历数组的时候只遍历元素中该位置为0（或者1）的元素，就一定只包含a或b的一个。这个遍历过程就和原始问题一样了，只不过加了一个条件。具体参照如下代码：

void printOddTimesNum2(vector<int> arr)
{
    int e1 = 0;
    int e2 = 0;
    for(int i=0; i<arr.size(); i++)
    {
        e1 ^= arr[i];
    }
    int rightOne = e1 & (~e1 + 1);
    for(int i=0; i<arr.size(); i++)
    {
        if((arr[i] & rightOne) != 0)
        {
            e2 ^= arr[i];
        }
    }
    cout<<e2<<" "<<(e2^e1)<<endl;
}


位运算---在其他数都出现k次的数组中找到只出现一次的数
2017年09月07日 23:54:10
阅读数：123
【题目】

　　给定一个整型数组arr和一个大于1的整数k，已知arr中只有一个数出现了一次，其他的数都出现了k次，请返回只出现1次的数。要求时间复杂度O(N)，空间复杂度O(1)。

【基本思路】

　　首先看一个七进制数无进位相加的问题。 
　　七进制数a: 　　　　6 4 3 2 6 0 1 
　　七进制数b:　　　　 3 4 5 0 1 1 1 
　　无进制相加的结果:　 2 1 1 2 0 1 2

　　可以看出，a和b无进位相加，在i位置上的结果就是 (a[i] + b[i]) % 7。同理，k进制的两个数相加，i位置上的值为 (a[i] + b[i]) % k。那么，如果k个相同的k进制数相加，相加的结果一定是每一位上都为0。

　　知道上述过程，解这道题就很容易了。首先将数组中每一个数都转换成k进制数，如果一个元素出现了k次，那么k次相加以后一定为0。所以，设置一个变量e，初始化为0，将所有元素相加完后，e的值就是只出现一次的数的k进制形式，再将其转换成10进制数就可以了。

下面是使用c++实现的代码。

int onceNum(vector<int> arr, int k)
{
    int e[32] = {0};
    for(int i=0; i<arr.size(); i++)
    {
        setExclusiveOr(e, arr[i], k);
    }
    int res = getNumfromKSysNum(e, k);
    return res;
}

void setExclusiveOr(int e[], int value, int k)
{
    int *val = new int[32];
    val = getKSysNumfromNum(value, k);
    for(int i=0; i<32; i++)
    {
        e[i] = (e[i] + val[i]) % k;
    }
}

int getNumfromKSysNum(int e[],int k)
{
    int res = 0;
    for(int i=0; i<32; i++)
    {
        res = res * k + e[i];
    }
    return res;
}

int *getKSysNumfromNum(int value, int k)
{
    int *res = new int[32];
    int index = 31;
    while(value != 0)
    {
        res[index--] = value % k;
        value /= k;
    }
    return res;
}
