第5章  字符串问题
判断两个字符串是否为变形词
字符串中数字子串的求和
去掉字符串中连续出现k个0的子串
判断两个字符串是否互为旋转词
将整数字符串转成整数型
替换字符串中连续出现的指定字符串
字符串的统计字符串 
判断字符数组中是否所有的字符只出现了一次
在有序但含有空的数组中查找字符串
字符串的调整与替换
翻转字符串
数组中两个字符串的最小距离
添加最少字符使字符串整体都是回文字符串
括号字符串的有效性和最长有效长度
公式字符串求值
0左边必有1的二进制字符串数量
拼接所有字符串产生字典顺序最小的大字符串
找到字符串的最长无重复字符子串
找到被指的新类型字符
最小包含子串的长度
回文最小分割数
字典树（前缀树）的实现


字符串问题---判断两个字符串是否为变形词
2017年08月16日 23:21:35
阅读数：155
【问题】 
　　给定两个字符串str1和str2，如果str1和str2中出现的字符种类一样并且每种字符出现的次数也一样，那么str1与str2互为变形词。请实现函数判断两个字符串是否互为变形词。

【举例】 
　　str1 = “123”，str2 = “231”，返回True 
　　str1 = “123”，str2 = “2331”，返回False

【基本思路】

如果两个字符串的长度不相同，直接返回False

假设出现的字符的编码值在0~255之间，即是ASCII编码，那么先申请一个长度为256的整型数组array，arr[a] = b，表示字符a出现的次数是b，依次遍历字符串str1，统计每种字符出现的数量，相当于统计每种字符的词频。

遍历字符串str2，每遍历到一个字符都在array数组中把词频减1，如果减少之后的值小于0，直接返回False。如果遍历完str2，array中的值也没有成为负数，则返回True。

为什么只考虑词频最后是否有负数？因为如果最后有的词频为正数，说明str1的长度一定大于str2，这种情况在步骤一的时候就已经剔除了。

如果字符的范围不在0~255，则可以利用哈希表来代替数组。
下面是使用python3.5实现的代码

#判断两个字符串是否为变形词
#使用数组进行判断
def isDeformation1(str1, str2):
    if str1 ==  None or str2 == None or len(str1) != len(str2):
        return False
    array = [0 for i in range(256)]
    for i in range(len(str1)):
        array[ord(str1[i])] += 1
    for i in range(len(str2)):
        array[ord(str2[i])] -= 1
        if array[ord(str2[i])] < 0:
            return False
    return True


#使用哈希表进行判断
def isDeformation2(str1, str2):
    if str1 == None or str2 == None or len(str1) != len(str2):
        return False
    map = {}
    for i in range(len(str1)):
        if str1[i] not in map:
            map[str1[i]] = 1
        else:
            map[str1[i]] = map[str1[i]] + 1
    for i in range(len(str2)):
        if str2[i] not in map:
            return False
        else:
            map[str2[i]] = map[str2[i]] - 1
            if map[str2[i]] < 0:
                return False
    return True

字符串问题---字符串中数字子串的求和
2017年08月17日 00:01:00
阅读数：280
【题目】 
　　给定一个字符串str，求其中全部数字串所代表的数字之和。要求如下：

忽略小数点字符，例如“A1.3”，其中包含两个数字1和3.
如果紧贴数字子串的左侧出现字符“-”，当连续出现的数量为奇数时，则数字视为负，连续出现的数量为偶数时，则数字视为正。例如，“A-1BC- -12”，其中包含数字-1和12。
【举例】 
　　str = “A1CD2E33”返回36. 
　　str = “A-1B- -2C- -D6E”，返回7。

【基本思路】

使用三个变量。res，num和posi。res表示目前的累加和，num表示当前收集到的数字，posi表示数字num是正数还是负数，True表示正数，初始时res = 0, num = 0, posi = True。

从左到右依次遍历字符串，假设遍历到的字符为char。情况分析如下：

1）如果char是 ‘0’ ~ ‘9’，假设之前收集的数字为num，则可以根据posi更新num的值，如果posi == True，则num = num×10 + (char - ‘0’)，否则num = num×10 - (char - ‘0’)。posi的更新方法之后解释。

2）如果char不是 ‘0’ ~ ‘9’，则说明num已经是一个完整的数字了，该累加到res了，所以res += num，然后令num = 0。累加完后观察此时char的值，如果此时的字符不是“-”，则令posi = True，如果此时的字符为“-”，判断前一个字符是否也是“-”，如果是的话，令 posi = ！posi，否则令posi = False。

既然我们把累加的时机放在了char不是数字字符的时候，那么如果str是以数字字符结尾的，那么就会出现最后一个字符没有累加的情况。所以遍历完成后，还要再加一次num。

下面是使用python3.5实现的代码

#字符串中数字子串的求和
def numSum(str1):
    if str1 == None or len(str1) == 0:
        return 0
    res = 0
    num = 0
    cur = 0
    posi = True
    for i in range(len(str1)):
        cur = ord(str1[i]) - ord('0')
        if cur < 0 or cur > 9:
            res += num
            num = 0
            if str1[i] == '-':
                if i - 1 >= 0 and str1[i-1] == '-':
                    posi = not posi
                else:
                    posi = False
            else:
                pose = True
        else:
            num = num * 10 + cur if posi else -cur
    res += num
    return res

字符串问题---去掉字符串中连续出现k个0的子串
2017年08月17日 00:27:03
阅读数：258
【题目】 
　　给定一个字符串str和一个整数k，如果str中刚好有连续的k个‘0’字符出现时，把k个连续的‘0’字符删除，返回处理后的字符串。

【举例】 
　　str = “A00B”，k = 2，返回 “AB”。 
　　str = “A0000B000”，k = 3，返回 “A0000B”。

【基本思路】

使用两个变量count和start。count表示目前出现的连续‘0’的个数，start表示连续个‘0’出现的开始的位置。初始时，count = 0，start = -1。

从左到右依次遍历str，假设遍历到i的位置的字符为char，情况分析如下：

1）如果char是字符‘0’，此时更新start的值，如果start = -1 ，说明之前没处在发现连续的 ‘0’的阶段，那么令start = i，否则start不变。同时令count加1。

2）如果char不是字符‘0’，此时为去掉连续 ‘0’的阶段。首先看此时count的值是否等于k，如果等于的话，说明之前出现的字符 ‘0’的个数正好为k，删除这些连续的 ‘0’；如果不等于的话，不必删除。最后令count = 0，start = -1。

3）既然把去掉 ‘0’的时机放在了char不是字符 ‘0’的时候，那么str如果以k个 ‘0’结尾的话，这个连续的 ‘0’就不会删除，所以在最后要再次判断一下count。

下面是使用python3.5实现的代码

#去掉字符串中连续出现k个0的子串
def removeKZeros(str1, k):
    if str1 == None or k < 1:
        return str1
    count = 0
    start = -1
    chas = list(str1)
    for i in range(len(chas)):
        if chas[i] == '0':
            count += 1
            start = i if start == -1 else start
        else:
            if count == k:
                while count > 0:
                    chas[start] = ""
                    start += 1
                    count -= 1
            count = 0
            start = -1
    if count == k:
        while count > 0:
            chas[start] = ""
            start += 1
            count -= 1
    return ''.join(chas)

字符串问题---判断两个字符串是否互为旋转词
2017年08月17日 23:46:27
阅读数：154
【题目】

　　如果一个字符str，把字符str前面任意的部分挪到后面形成的字符叫做str的旋转词。比如str = “12345”，str的旋转词有 “12345”, “23451”, “34512”, “45123”和“51234”。给定两个字符串a和b，请判断a和b是否互为旋转词。

【基本思路】

如果a和b的长度不一样，直接返回False。

生成一个大字符串c，c是两个字符串a拼在一起的结果，即c = a + a，只要判断b是否为c的子串即可。

判断一个字符串是否是另一个字符串的子串，使用KMP可以使时间复杂度达到O(N)。
下面是使用python3.5实现的代码

#判断两个字符串是否互为旋转词
def isRotation(str1, str2):
    def KMP(str1, str2):
        if str1 == None or str2 == None or len(str2) == 1 or len(str1) < len(str2):
            return False
        next = getNextArray(str2)
        si = 0 
        mi = 0
        while si < len(str1) and mi < len(str2):
            if str1[si] == str2[mi]:
                si += 1
                mi += 1
            elif next[mi] == -1:
                si += 1
            else:
                mi = next[mi]
        return True if mi == len(str2) else False

    def getNextArray(str1):
        if len(str1) == 1:
            return [-1]
        next = [0 for i in range(len(str1))]
        next[0] = -1
        next[1] = 0
        pos = 2
        cn = 0
        while pos < len(str1):
            if str1[pos-1] == str1[cn]:
                next[pos] = cn + 1
                pos += 1
                cn += 1
            elif cn > 0:
                cn = next[cn]
            else:
                next[pos] = 0
                pos += 1
        return next


    if str1 == None or str2 == None or len(str1) != len(str2):
        return False
    str3 = str1 * 2
    return KMP(str3, str2)


字符串问题---将整数字符串转成整数型
2017年08月18日 21:19:21
阅读数：166
【题目】

　　给定一个字符串str，如果str符合日常书写的整数形式，并且属于32位整数的范围，返回str所代表的整数值，否则返回0。

【举例】

　　str = “123”，返回123。 
　　str = “023”，因为不符合日常的书写习惯，返回0。 
　　str = “A123”，返回0。 
　　str = “2147483647”，返回2147482647 
　　str = “2147483648”，溢出，返回0。 
　　str = “-123”，返回-123。

【基本思路】

　　分为两大步骤。第一步骤，判断字符串的格式是否正确。第二步骤，如果符合书写规范，将字符串转换成整数型。

一.判断字符串是否符合书写规范。

如果str不以‘-’开头，也不以数字字符开头，返回False。
如果str以‘-’开头，但是字符串的长度为1，或者字符串的第二个字符是0，返回False。
如果字符串以‘0’开头，但是字符串的长度大于1，返回False。
如果步骤1~3都不返回False，遍历str[1…N-1]，如果有一个不是数字字符，返回False。如果都是数字字符，返回True。
二.将字符串转换为整数型。

　　32位整数的范围是-2^31 ~ 2^31-1，最小整数的绝对值大，所以在转换的过程中的绝对值一律以负数形式出现。具体过程如下：

使用布尔型变量posi来表示转换的数字是正还是负，正为True，负为False，由字符串的第一个字符来确定posi的值。使用res变量来表示转换的结果。

如果第一个字符是‘-’，从str[1]开始向右遍历，否则从str[0]开始向右遍历。假设遍历到当前的字符的负数形式是cur，res = res × 10 + cur。遍历的过程中统一使用负数形式，最后在根据posi的值确定最终的结果。

遍历过程中如何判断数字是否溢出？使用两个变量，minq代表32位整数最小值除以10的商，minr表示32位整数最小值除以10的余数。在遍历累加的过程中，如果发现res的值已经小于minq，那么再加上cur，则最终的结果一定溢出。如果res的值等于minq，又发现cur小于minr，则最终的结果也一定溢出。出现任意一种溢出的情况，直接返回0。

最后根据posi的值来确定数字的正负。注意如果res = -2^31，但是posi = True，此时正溢出，返回0。

为什么需要使用minq，minr的方式来判断溢出而不直接和-2^31 ~，2^31-1比较？因为对于32位系统如果所累积的和超过这个范围，计算机就已经无法表示，程序会直接报错。
下面是使用python3.5实现的代码

#将整数字符串转成整数型
def convert(str1):
    def isValid(str1):
        if str1[0] != "-" and (ord(str1[0]) < ord('0') or ord(str1[0]) > ord('9')):
            return False
        if str1[0] == '-' and (len(str1) == 1 or str1[1] == '0'):
            return False
        if str[0] == '0' and len(str) > 1:
            return False
        for i in range(1, len(str1)):
            if ord(str1[i]) < ord('0') or ord(str1[i]) > ord('9'):
                return False
        return True

    if str1 == None or str1 == "":
        return 0
    if not isValid(str1):
        return 0
    posi = False if str1[0] == '-' else True
    minq = (-1 << 31) / 10
    minr = (-1 << 31) % 10
    res = 0
    cur = 0
    for i in range(0 if posi else 1, len(str1)):
        cur = ord('0') - ord(str1[i])
        if res < minq or (res == minq and cur < minr):
            return 0
        res = res * 10 + cur
    if posi and res == (-1 << 31):
        return 0
    return -res if posi else res


字符串问题---替换字符串中连续出现的指定字符串
2017年08月18日 21:44:41
阅读数：97
【题目】

　　给定三个字符串str，from和to，已知from字符串中没有重复字符，把str中所有from的子串全部替换成to字符串，对连续出现from的部分要求只替换一个to字符串，返回最终的结果字符串。

【举例】

　　str = “123abc”，from = “abc”，to = “4567”，返回“1234567”。 
　　str = “123”，from = “abc”，to = “4567”，返回“123”。 
　　str = “123abcabc”，from = “abc”，to = “X”，返回“123X”。

【基本思路】

使用变量match表示目前匹配到from的什么位置。从左到右遍历str。

如果str[i] == from[match]，并且match是from的最后一个字符的位置，说明在str中发现了from的子串，将该子串字符的位置全部设置为空字符。同时将match归0，继续遍历数组。如果match不是from的最后位置，match + 1。

如果str[i] != from[match]，将match归0，同时，还需要注意此时str[i]是否等于from[0]，如果等于的话，说明str[i]可能作为下一处子串的开头，令match + 1。

接下来只需要把空字符的位置替换成to即可，连续的空字符只替换一次。

下面是使用python3.5实现的代码

#替换字符串中连续出现的指定字符串
def replace(str1, fro, to):
    if str1 == None or fro == None or to == None  or str1 == '' or fro == '':
        return str1
    chas = list(str1)
    match = 0
    for i in range(len(str1)):
        if chas[i] == fro[match]:
            match += 1
            if match == len(fro):
                index = i
                while match > 0:
                    chas[index] = ''
                    index -= 1
                    match -= 1
        else:
            match = 0
            if chas[i] == fro[0]:   #如果相等，从当前字符重新匹配
                match += 1
    cur = ''
    res = ''
    for i in range(len(str1)):
        if chas[i] != '':
            cur = cur + chas[i]
        else:
            if i == 0 or chas[i-1] != '':
                res = res + cur + to
                cur = ''
    if cur != '':
        res += cur
    return res


字符串问题---字符串的统计字符串
2017年08月18日 22:21:53
阅读数：128
【题目】

　　给定一个字符串str，返回str的统计字符串。例如，“aaabbadddffc”的统计字符串为“a_3_b_2_1_d_3_f_2_c_1”。

【补充题目】

　　给定一个字符串的统计字符串cstr，再给定一个整数index，返回cstr所代表的原始字符串上第index个字符。例如，”a_1_b_100”所代表的原始字符串上第0个字符是‘a’，第50个字符是‘b’。

【基本思路】

　　原问题。从左到右遍历str，如果发现当前字符不等于前一个字符，就将之前的字符和频数添加到新的字符串。详情参照如下代码。

　　补充题目。

使用posi用来判断当前字符是字母字符还是数字字符，True表示字母字符，False表示数字字符。初始时令posi = True。从左到右遍历字符串，如果遇到‘_’，就反转posi。

每当遇到下一个字母，就将之前的字母以及频数加到新字符串。

注意处理字符串的结尾。

详情见如下代码

下面是使用python3.5实现的代码


#字符串的统计字符串
#原问题
def getCountString(str1):
    if str1 == None or str1 == '':
        return ''
    res = str1[0]
    num = 1
    for i in range(1, len(str1)):
        if str1[i] == str1[i-1]:
            num += 1
        else:
            res = res + '_' + str(num) + '_' + str1[i]
            num = 1
    return res + '_' + str(num)

#补充题目
def getCharAt(str1, index):
    if str1 == None or str1 == '' or index < 0:
        return ''
    posi = True
    cur = ''
    num = 0
    sum = 0
    for i in range(len(str1)):
        if str1[i] == '_':
            posi = not posi
        elif posi:
            sum += num
            if sum > index:
                return cur
            cur = str1[i]
            num = 0
        else:
            num = num * 10 +int(str1[i])
    return cur if sum+num > index else ''


字符串问题---判断字符数组中是否所有的字符只出现了一次
2017年08月18日 22:31:09
阅读数：210
【题目】

　　给定一个字符类型数组chas，判断chas中是否所有的字符都只出现过一次。

【基本思路】

　　一.时间复杂度为O(N)的算法。 
　　 
　　使用哈希表，记录每个字符出现的频数，如果发现字符的频数不为1，直接返回False。

　　二.时间复杂度为O(NlogN)，空间复杂度为O(1)的算法。 
　　 
　　１．先将数组排序，再判断当前字符是否等于前一个字符即可。 
　　 
　　２．关键使用什么样的排序算法，满足复杂度要求的算法只有非递归版的堆排序。

下面是使用python3.5实现的代码

#判断字符数组中是否所有的字符只出现了一次
#时间复杂度O(N)的算法
def isUnique1(arr):
    if arr == None or len(arr) == 0:
        return True
    map = {}
    for i in range(len(arr)):
        if arr[i] in map:
            return False
        map[arr[i]] = None
    return True

#额外空间复杂度O(1)的算法
def isUnique2(arr):
    def heapSort(arr):
        n = len(arr)
        for i in range((n-2)//2, -1, -1):
            precDown(arr, i, n)
        for i in range(n-1, 0, -1):
            arr[0], arr[i] = arr[i], arr[0]
            precDown(arr, 0, i)
        return arr

    def precDown(arr, i, n):
        child = 2 * i + 1
        tmp = arr[i]
        while child < n:
            if child < n-1 and arr[child] < arr[child+1]:
                child += 1
            if tmp < arr[child]:
                arr[i] = arr[child]
                i = child
            else:
                break
            child = 2 * i + 1
        arr[i] = tmp



    if arr == None or len(arr) == 0:
        return False
    print(heapSort([9,8,7,6,5,4,3,12,45,67]))
    heapSort(arr)
    for i in range(1, len(arr)):
        if arr[i] == arr[i-1]:
            return False
    return True


字符串问题---在有序但含有空的数组中查找字符串
2017年08月18日 22:39:50
阅读数：102
【题目】

　　给定一个字符串数组strs[]，在strs中有些位置为null，但在不为null的位置上，其字符串是按照字典顺序从小到大依次出现的。再给定一个字符串str，请返回str在strs中出现最左的位置。

【基本思路】

　　因为字符串是有顺序的，所以可以使用二分查找，只要注意处理null位置就行。并且注意所求的是最左的位置，所以找到一个str的位置还要再考虑数组中是否还有更左的str。

下面是使用python3.5实现的代码

#在有序但含有空的数组中查找字符串
def getIndex(strs, str1):
    if strs == None or len(strs) == 0 or str1 == None:
        return -1
    left = 0
    right = len(strs) - 1
    res = -1
    while left <= right:
        mid = (right + left) // 2
        if strs[mid] == str1:
            res = mid
            right = mid - 1
        elif strs[mid] != None:
            if strs[mid] < str1:
                left = mid + 1
            else:
                right = mid - 1
        else:
            i = mid
            while i >= left:
                if strs[i] != None:
                    break
                i -= 1
            if i < left or strs[i] < str1:
                left = mid + 1
            else:
                res = i if strs[i] == str1 else res
                right = i - 1
    return res


字符串问题---字符串的调整与替换
2017年08月19日 12:09:56
阅读数：369
【题目】

　　给定一个字符类型的数组chas[]，chas的右半区全是空字符，左半区不含有空字符。现在想将左半区中所有的空格字符替换成“%20”，假设chas的右半区足够大，可以满足替换所需要的空间，请完成替换函数。要求时间复杂度O(N)，空间复杂度O(1)。

【补充题目】

　　给定一个字符类型的数组chas[]，其中只含有数字字符和‘ * ’字符。现在想将所有的 ‘ * ’字符都放在chas的左边，数字字符放在chas 的右边。请完成调整函数。

【基本思路】

　　以上两个题目都是利用倒着复制的技巧。

　　对于原问题首先求出左半区的长度length，然后求出空格字符的个数num，进而可以求出替换后的有效长度，即newlen = length + num * 2。然后从chas的最后一个有效字符开始倒着遍历，同时将字符复制到新长度的最后位置，并依次倒着向左复制。遇到空格字符就依次把‘0’，‘2’，‘%’进行复制。

　　对于补充问题。同样是从右到左倒着复制，遇到数字字符就直接复制，遇到‘ * ’不复制。当把数字字符复制完，数组的其余部分都设置成‘ * ’。

下面是使用python3.5实现的代码

#字符串的调整与替换
#原问题
def adjustAndReplace(chas):
    if chas == None or len(chas) == 0:
        return chas
    length = 0
    num = 0
    for i in range(len(chas)):
        if chas[i] != '':
            length += 1
            if chas[i] == ' ':
                num += 1
        else:
            break
    newlen = length + 2 * num
    for i in range(length-1, -1, -1):
        if chas[i] != ' ':
            chas[newlen-1] = chas[i]
            newlen -= 1
        else:
            chas[newlen-1] = '0'
            chas[newlen-2] = '2'
            chas[newlen-3] = '%'
            newlen -= 3
    return ''.join(chas)

#补充问题
def modify(chas):
    if chas == None or len(chas) == 0:
        return chas
    n = len(chas)
    for i in range(len(chas)-1, -1, -1):
        if chas[i] != '*':
            chas[n-1] = chas[i]
            n -= 1
    for i in range(n-1, -1, -1):
        chas[i] = '*'
    return chas


字符串问题---翻转字符串
2017年08月19日 18:11:21
阅读数：104
【题目】

　　给定一个字符类型的数组chas，请在单词间做逆序调整，只要做到单词顺序逆序即可，对空格的位置没有特别要求。例如把chas看成字符串为“I love you”，调整成“you love I”。

【补充题目】

　　给定一个字符类型的数组chas和一个整数size，请把大小为size的左半区整体移到右半区，右半区整体移到左边。例如，如果把chas看作字符串“ABCDE”，size = 3，调整成“DEABC”。

【基本思路】

　　原问题。首先对整个数组逆序，然后遍历数组找到每一个单词，将每个单词里的字符进行逆序即可。

　　补充问题。 
　　 
　　方法一。先把chas[0…size-1]部分逆序，再把chas[size…N-1]部分逆序，最后再将整体逆序即可。

　　方法二。举例说明，chas = “1234567ABCD”，size = 7。

将 “ABCD”与 “1234”整体进行交换，得到结果“ABCD5671234”。
保持 “ABCD”不动，将“567”和“234”整体进行交换，得到结果“ABCD2341567”。
保持“ABCD”“567”不动，将“1”与“2”进行替换，得到结果“ABCD1342567”。
将“2”与“3”交换，得到结果“ABCD1243567”。
将“3”与“4”交换，最终结果为“ABCD1234567”。
下面是用python3.5实现的代码。

#翻转字符串
#原问题
def rotateWord(chas):
    def reverse(chas, start, end):
        while start < end:
            chas[start], chas[end] = chas[end], chas[start]
            start += 1
            end -= 1


    if chas == None or len(chas) == 0:
        return 
    reverse(chas, 0, len(chas)-1)
    left = -1
    right = -1
    for i in range(len(chas)):
        if chas[i] != ' ':
            left = i if i == 0 or chas[i-1] == ' ' else left
            right = i if i ==  len(chas)-1 or chas[i+1] == ' ' else right
        if left != -1 and right != -1:
            reverse(chas, left, right)
            left = -1
            right = -1
    return chas


#补充问题
＃方法一
def rotate2(chas, size):
    def reverse(chas, start, end):
        while start < end:
            chas[start], chas[end] = chas[end], chas[start]
            start += 1
            end -= 1


    if chas == None or len(chas) == 0 or size < 0:
        return
    reverse(chas, 0, size-1)
    reverse(chas, size, len(chas)-1)
    reverse(chas, 0, len(chas)-1)
    return chas


＃方法二
def rotate1(chas, size):
    def exchange(chas, start, end, size):
        i = end - size + 1
        while size > 0:
            chas[start], chas[i] = chas[i], chas[start]
            start += 1
            i += 1
            size -= 1


    if chas == None or len(chas) == 0 or size < 0:
        return 
    start = 0
    end = len(chas) - 1
    lpart = size
    rpart = len(chas) - size
    s = min(lpart, rpart)
    d = lpart - rpart
    while True:
        exchange(chas, start, end, s)
        if d == 0:
            break
        elif d < 0:
            rpart = -d
            end -= s
        else:
            lpart = d
            start += s
        s = min(lpart, rpart)
        d = lpart - rpart
    return chas

字符串问题---数组中两个字符串的最小距离
2017年08月19日 18:59:39
阅读数：130
【题目】

　　给定一个字符串数组strs，再给定两个字符串str1和str2，返回strs中str1与str2的最小距离，如果str1或str2为null，或不在strs中，返回-1。

【基本思路】

　　从左到右遍历strs，用变量last1记录最近一次出现的str1的位置，用变量last2记录最近一次出现str2的位置。如果遍历到str1，那么i - last2就是当前的str1和左边离它最近的str2之间的距离。如果遍历到str2，那么i - last1就是当前的str2和左边离它最近的str1之间的距离。用全局变量记录最小距离即可。

下面是使用python3.5实现的代码。

#数组中两个字符串的最小距离
def minDistance(strs, str1, str2):
    if strs == None or str1 == None or str2 == None:
        return -1
    if str1 == str2:
        return 0
    last1 = -1
    last2 = -1
    minDistance = sys.maxsize
    for i in range(len(strs)):
        if strs[i] == str1:
            if last2 != -1:
                dist = i - last2
                minDistance = min(minDistance, dist)
            last1 = i
        if strs[i] == str2:
            if last1 != -1:
                dist = i - last1
                minDistance = min(minDistance, dist)
            last2 = i
    return minDistance if minDistance != sys.maxsize else -1


字符串问题---添加最少字符使字符串整体都是回文字符串
2017年08月21日 09:10:54
阅读数：339
【题目】

　　给定一个字符串str，如果可以在str的任意位置添加字符，请返回在添加字符最少的情况下，让str整体都是回文字符串的结果。

【进阶题目】

　　给定一个字符串str，再给定str的最长回文子序列字符串strlps，请返回在添加字符最少的情况下，让str整体都是回文字符串的一种结果。进阶问题比原问题多了一个参数，请做到时间复杂度比原问题的实现低。

【基本思路】

　　原问题。首先考虑，如果可以在str的任意位置添加字符，最少需要添加几个字符就可以让str整体都是回文字符串。这个问题可以使用动态规划解决。如果str的长度为N，生成N×N的dp矩阵，dp[i][j]的含义是子串str[i…j]最少添加几个字符可以使str[i…j]整体都是回文串。dp[i][j]的求法如下：

如果i == j，说明此时只有一个字符，本身就是回文串，dp[i][j] = 0。

如果str[i…j]有两个字符，如果这个字符相同dp[i][j] = 0。否则dp[i][j] = 1。

如果str[i…j]多于两个字母，如果str[i] == str[j]。则dp[i][j] = dp[i+1][j-1]。否则，dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1。为什么呢？举例说明，假设str = “ABC”，可以先将“BC”变成回文串“BCB”，然后在末尾加“A”，也可以先将“AB”变成回文串“ABA”，然后在最前面加“C”。即可以先处理str[i+1…j]然后末尾加str[i]，也可以先处理str[[i…j-1]然后开头加str[j]。
接下来介绍如何根据dp矩阵，求在添加字符最少的情况下，让str整体都是回文字符串的一种结果。首先，dp[0][N-1]的值代表整个字符串最少需要添加几个字符，所以，如果最后的结果记为字符串res，res的长度为 N + dp[0][N-1]，然后依次设置res左右两头的字符。具体过程如下：

如果str[i] == str[j]，那么str[i…j]变成回文串的最终结果为 str[i] + str[i+1][j-1]变成回文串的结果 + str[j]，此时res的左右两头字符为str[i]，然后根据str[i+1][j-1]和矩阵dp确定res的中间部分。

如果str[i] != str[j]，判断dp[i][j-1]和dp[i+1][j]哪个小，如果dp[i][j-1]小，那么str变成回文串的结果为 str[j] + str[i][j-1]变成回文串的结果 + str[j]，此时res左右两头的字符为str[j]，然后根据str[i][j-1]和矩阵dp确定res的中间部分。如果dp[i+1][j]小，过程同上。

下面是使用python3.5实现的代码

#添加最少字符使字符串整体都是回文字符串
#原问题
def getPalindrome(str1):
    def getdp(str1):
        dp = [[0 for i in range(len(str1))] for j in range(len(str1))]
        for j in range(1, len(str1)):
            dp[j-1][j] = 0 if str1[j-1] == str1[j] else 1
            for i in range(j-2, -1, -1):
                if str1[i] == str1[j]:
                    dp[i][j] = dp[i+1][j-1]
                else:
                    dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1
        return dp


    if str1 == None or len(str1) < 2:
        return str1
    dp = getdp(str1)
    res = [0 for i in range(len(str1)+dp[0][len(str1)-1])]
    i = 0
    j = len(str1) - 1
    resl = 0
    resr = len(res) - 1
    while i <= j:
        if str1[i] == str1[j]:
            res[resl] = str1[i]
            res[resr] = str1[j]
            i += 1
            j -= 1
        elif dp[i+1][j] < dp[i][j-1]:
            res[resl] = str1[i]
            res[resr] = str1[i]
            i += 1
        else:
            res[resl] = str1[j]
            res[resr] = str1[j]
            j -= 1
        resl += 1
        resr -= 1
    return ''.join(res)

进阶问题。假设str的长度为N，strlps的长度为M，则整体回文串的长度为2×N - M。整个过程类似 “剥洋葱”。代码如下：

#补充问题
def getPalindrome2(str1, strlps):
    if str1 == None or len(str1) == 0 or strlps == None or len(strlps) == 0:
        return 
    res = [0 for i in range(2*len(str1)-len(strlps))]
    lstr = 0
    rstr = len(str1)-1
    llps = 0
    rlps = len(strlps)-1
    lres = 0
    rres = len(res)-1
    while llps <= rlps:
        temp1 = lstr
        temp2 = rstr
        while str1[lstr] != strlps[llps]:
            lstr += 1
        while str1[rstr] != strlps[rlps]:
            rstr -= 1
        for i in range(temp1, lstr): 
            res[lres] = str1[i]
            res[rres] = str1[i]
            lres += 1
            rres -= 1
        for i in range(temp2, rstr, -1):
            res[lres] = str1[i]
            res[rres] = str1[i]
            lres += 1
            rres -= 1
        res[lres] = str1[lstr]
        res[rres] = str1[rstr]
        lstr += 1
        rstr -= 1
        lres += 1
        rres -= 1
        llps += 1
        rlps -= 1
    return ''.join(res)

字符串问题---括号字符串的有效性和最长有效长度
2017年08月21日 15:09:28
阅读数：208
【题目】

　　给定一个字符串str，判断是不是整体有效的括号字符串。例如，str = “()()()”，返回True，str = “())” 或 “()a()”，返回False。

【补充题目】

　　给定一个括号字符串，返回最长的有效字符串的长度。

【基本思路】

原问题。判断过程如下：

从左到右遍历str，判断每一个字符是否是括号，如果不是，直接返回False。
遍历过程中，检查目前位置 ‘(‘和 ‘)’的数量，如果 ‘)’的数量多，直接返回False。
遍历结束后，检查 ‘(‘和 ‘)’的数量是否相同，如果一样多返回True，否则返回False。
补充问题。使用动态规划，类似于最长递增子序列问题。假设str的长度为N，生成长度为N的dp数组，dp[i]的含义是必须以str[i]结尾的最长有效括号长度子串。dp的求解如下：

dp[0]，表示只含有一个括号，dp[0] = 0。

如果dp[i] == ‘(‘，肯定不能作为末尾，dp[i] = 0。

如果dp[i] == ‘)’，dp[i-1]的含义是以str[i-1]结尾的最长有效子串长度，如果 i - dp[i-1] - 1位置上的字符是 ‘(‘，则可以与dp[i]凑成一对，则此时dp[i]最小等于dp[i-1] + 2。此外，如果 i - dp[i-1] - 1位置上的字符变成了有效字符，那么以该位置的前一个位置 i - dp[i-1] - 2的最长有效长度也应该加进来，所以dp[i] = dp[i-1] + 2 + dp[i - dp[i-1] - 2]。
dp[0…N-1]中最大的值就是最长的有效字符串的长度。

下面是使用python3.5实现的代码

#括号字符串的有效性和最长有效长度
#原题目
def isValid(str1):
    if str1 == None or len(str1) == 0:
        return False
    status = 0
    for i in range(len(str1)):
        if str1[i] != '(' and str1[i] != ')':
            return False
        elif str1[i] == '(':
            status += 1
        else:
            status -= 1
            if status < 0:
                return False
    return status == 0

#补充题目
def maxValidLength(str1):
    if str1 == None or len(str1) == 0:
        return 0
    dp = [0 for i in range(len(str1))]
    res = 0
    for i in range(1, len(str1)):
        if str1[i] == ')':
            pre = i - dp[i-1] - 1
            if pre >= 0 and str1[pre] == '(':
                dp[i] = dp[i-1] + 2 + dp[pre-1] if pre > 0 else 0
            res = max(res, dp[i])
    return res

字符串问题---公式字符串求值
2017年08月21日 22:14:03
阅读数：230
【题目】

　　给定一个字符串str，str表示一个公式，公式里可能有整数，加减乘除符号和左右括号，返回公式计算的结果。例如，str = 48×((70-65)-43)+8×1。返回-1816。

【说明】

可以认定给定的字符串一定是正确的公式，不需要对str做公式有效性检查。

如果是负数就需要有括号括起来，比如4*(-3)。但如果负数作为公式的开头或者括号部分的开头，则可以没有括号，比如-3*4和（-3*4）都是合法的。

不需要考虑溢出问题
【基本思路】

　　本题可以使用递归的方法。从左到右遍历str，如果遇到左括号就进入递归，相当于将括号里的内容当成一个新的公式，等括号里的内容计算完成后将结果返回，此时再接着继续遍历str，直到str遍历完或者遇到右括号，这样就相当于str中不再包含左右括号。递归过程需要返回两个结果，一个是当前子公式计算的结果，一个是当前遍历到的str的位置。这样上级递归函数就可以根据这两个数据继续向后遍历。计算公式的结果时，先将乘法和除法计算完，最后再统一计算计算加法和减法。

下面是使用python3.5实现的代码。

#公式字符串求值
def getValue(exp):
    def value(exp, i):
        deque = []
        pre = 0      
        while i < len(exp) and exp[i] != ')':
            if ord(exp[i]) >= ord('0') and ord(exp[i]) <= ord('9'):
                pre = pre * 10 + int(exp[i])
                i += 1
            elif exp[i] != '(':
                addNum(deque, pre)
                deque.append(exp[i])
                i += 1
                pre = 0
            else:
                bra = value(exp, i + 1)
                pre = bra[0]
                i = bra[1] + 1
        addNum(deque, pre)
        return [getNum(deque), i]

    #计算乘法除法
    def addNum(deque, pre):
        if deque:
            top = deque.pop()
            if top == '+' or top == '-':
                deque.append(top)
            else:
                cur = int(deque.pop())
                pre = cur * pre if top == '*' else cur / pre
        deque.append(pre)

    #计算加法减法
    def getNum(deque):
        res = 0
        add = True
        while deque:
            cur = deque.pop(0)
            if cur == '+':
                add = True
            elif cur == '-':
                add = False
            else:
                res += int(cur) if add else -int(cur)
        return res


    return value(exp, 0)[0]

字符串问题---0左边必有1的二进制字符串数量
2017年08月22日 20:16:22
阅读数：247
【问题】

　　给定一个整数N，求由‘0’字符和‘1’字符组成的长度为N的所有字符串中，满足‘0’字符的左边必有‘1’字符的字符串数量。

【举例】

　　N = 1。只由‘0’和‘1’组成，长度为1的所有字符串：“0”、“1”。只有字符串“1”满足要求，返回1。 
　　N = 2。只由‘0’和‘1’组成，长度为2的所有字符串：“00”，“01”，“10”，“11”。只有字符串“10”，“11”满足，返回2。 
　　N = 3。只由‘0’和‘1’组成，长度为3的所有字符串：“000”，“001”，“010”，“011”，“100”，“101”,“110”，“111”。只有字符串“101”，“110”，“111”满足，返回3。

【基本思路】

　　本题可以从字符串的末尾倒着遍历来考虑。举例来说，设str 的长度N，f(n)表示有n个字符的情况下，满足条件的字符串个数。首先需要明白，如果要满足“0”左边必定有“1”，那么字符串的开头一定不能为“0”。

str[N-1…N-1]，只包含一个字符，满足要求的只有“1”，所以f(1) = 1。

str[N-2…N-1]，包含两个字符，满足要求的只有“10”，“11”，所以f(2) = 2。

str[N-3…N-2]，包含三个字符，应该满足str[N-3]必须是“1”，此时，str[N-2]可以是“1”也可以是“0”。如果是“1”，那么可以组成个数就是f(2)；如果是“0”，那么可以组成的个数就是f(1)，所以f(3) = f(2) + f(1)。

str[N-4…N-1]，包含四个字符，应该满足str[N-4]必须是“1”，此时，str[N-3]可以是“1”也可以是“0”。如果是“1”，那么可以组成个数就是f(3)；如果是“0”，那么可以组成的个数就是f(2)，所以f(4) = f(3) + f(2)。

同理，str[0…N-1]，包含N个字符，应该满足str[0]必须是“1”，此时，str[1]可以是“1”也可以是“0”。如果是“1”，那么可以组成个数就是f(N-1)；如果是“0”，那么可以组成的个数就是f(N-2)，所以f(n) = f(n-1) + f(n-2)。
可以发现这就是一个典型的斐波那契问题，只不过斐波那契的初始项是1,1，该问题的初始项是1,2，接下来的求解步骤就斐波那契问题如出一辙。可以用递归，动态规划以及矩阵乘法的方式解决。

斐波那契的递归、动态规划和矩阵乘法的求解方法可以参考我的另一篇博客。点次链接

下面是使用python3.5实现的代码。

#0左边必定有1的二进制字符串数量
def getNum1(n):
    if n < 1:
        return 0
    if n == 1 or n == 2:
        return n
    return getNum1(n-1) + getNum1(n-2)

def getNum2(n):
    if n < 1:
        return 0
    if n == 1 or n == 2:
        return n
    pre = 1
    cur = 2
    for i in range(3, n+1):
        pre, cur = cur, pre+cur
    return cur

def getNum3(n):
    def matrixPower(m, p):
        res = [[0 if i != j else 1 for i in range(len(m[0]))] for j in range(len(m))]
        tmp = m
        while p > 0:
            if p & 1 != 0:
                res = muliMatrix(res, tmp)
            tmp = muliMatrix(tmp, tmp)
            p >>= 1
        return res

    def muliMatrix(m1, m2):
        res = [[0 for i in range(len(m2[0]))] for j in range(len(m1))]
        for i in range(len(m1)):
            for j in range(len(m2[0])):
                for k in range(len(m1[0])):
                    res[i][j] += m1[i][k] * m2[k][j]
        return res

    if n < 1:
        return 0
    if n == 1 or n == 2:
        return n
    base = [[1,1], [1,0]]
    res = matrixPower(base, n-2)
    return 2 * res[0][0] + res[1][0]

字符串问题---拼接所有字符串产生字典顺序最小的大字符串
2017年08月23日 01:21:47
阅读数：452
【问题】

　　给定一个字符串类型的数组strs，请找到一种拼接顺序，使得将所有的字符串拼接起来组成的大字符串是所有可能性中字典顺序最小的，并返回这个大字符串。

【举例】

　　strs = [“abc”, “de”]，可以拼接成 “abcde”，也可以拼接成 “deabc”，但前者的字典顺序更小，所以返回 “abcde”

　　strs = [“b”, “ba”]，可以拼成 “bba”,也可以拼成 “bab”，但前者的字典顺序更小，所以返回 “bab”。

【基本思路】

　　有一种思路为：先把strs中的字符串按照字典顺序排序，然后将串起来的结果返回。这么做是错误的，例如【举例】中的第二条，按照字典顺序排应该是b、ba，串起来的结果是bba，但是正确答案是bab。所以这个思路行不通。正确的排序方式如下：

　　假设两个字符分别是a，b。a和b拼起来的字符串表示为a.b，那么如果a.b的字典顺序小于b.a，就把a放在前面，否则把b放在前面。每两个字符之间都按照这个标准进行比较，以此标准排序后，最后串起来的结果就是正确答案。证明太复杂，省略。

下面是使用python3.5实现的代码。

关于python2/3 sort方法和sorted函数的使用可以参考我的另一篇博客。点此链接

#拼接所有字符串产生字典顺序最小的大字符串
def lowestString(chas):
    if chas == None or len(chas) == 0:
        return ""
    from functools import cmp_to_key
    chas = sorted(chas, key=cmp_to_key(lambda x,y: 1 if x+y > y+x else -1))
    return ''.join(chas)


字符串问题---找到字符串的最长无重复字符子串
2017年08月23日 20:32:25
阅读数：171
【题目】

　　给定一个字符串str，返回str中最长无重复字符子串的长度。

【举例】

　　str = “abcd”，返回4。 
　　str = “aabcb”，返回3。

【基本思路】

　　如果str的长度为N，字符的编码范围为M，本题可以做到时间复杂度为O(N)，空间复杂度O(M)。具体方法如下：

在遍历str之前，先申请几个变量。哈希表map，key表示某个字符，value为这个字符最近出现的位置。整型变量pre，如果当前遍历到的字符为str[i]，pre表示必须以str[i-1]结尾的情况下，最长无重复字符子串开始位置的前一个位置，初始时pre = -1。全局变量length保存出现的最长长度。从左到右依次遍历str，遍历到str[i]时，计算必须以str[i]结尾的最长无重复字符子串的长度。

map[str[i]]表示之前出现str[i]字符的位置，假设该位置是a。以str[i]结尾的无重复子串必然不包括a位置。

根据pre的定义可知，在以str[i-1]为结尾的情况下，最长无重复子串的长度为（i-1）- pre，此时如果a的位置在pre的右边，则以str[i]结尾的最长子串的长度为 i - a；如果a的位置在pre的左边，则以str[i]结尾的最长子串的长度为i - pre。这个问题画个图就很直观了，这里不多解释。

计算完长度以后，pre位置和a位置哪一个在右边就作为新的pre的值。然后去计算下一个位置的字符，整个过程用length保存出现的最大值。

下面是使用python3.5实现的代码。

#找到字符串的最长无重复字符子串
#使用哈希表
def maxUniqueStr(str1):
    if str1 == None or len(str1) == 0:
        return ""
    map = {}
    pre = -1
    length = 0
    for i in range(len(str1)):
        if str1[i] in map:
            pre = max(pre, map[str1[i]])
        length = max(length, i-pre)
        map[str1[i]] = i
    return length


#使用数组
def maxUniqueStr2(str1):
    if str1 == None or len(str1) == 0:
        return ""
    map = [-1 for i in range(256)]
    pre = -1
    length = 0
    for i in range(len(str1)):
        pre = max(pre, map[ord(str1[i])])
        length = max(length, i-pre)
        map[ord(str1[i])] = i
    return length


字符串问题---找到被指的新类型字符
2017年08月23日 21:42:04
阅读数：217
【题目】

　新类型的字符定义如下：

新类型字符是长度为１或２的字符串
表现形式可以仅是小写字母，也可以是大写字母＋小写字母，也可以是大写字母＋大写字母。例如，ａ，Bc，DD都是符合条件的新类型字符。
现在给定一个字符串str，str一定是若干新类型字符正确组合的结果。比如“eaCCBi”，由新类型字符“e”，“a”，“CC”，“Bi”拼成。再给定一个整数k，代表str中的位置。请返回被k位置指中的新类型字符。

【举例】

　str = “aaABCDEcBCg”.

k = 7时，返回“Ec”
k = 4时，返回“CD”
k = 10时，返回“g”
【基本思路】

　　一种笨方法是从左向右遍历，依次划出新类型字符，到k位置时就知道指定的新类型字符是什么。这里不在详述。

　　更快的方法。从k-1位置开始，向左统计大写字母的个数记为uNum，遇到小写字母就停止。如果uNum为奇数，str[k-1…k]就是被指中的新类型字符。如果uNum为偶数且str[k]为大写，则str[k…k+1]就是被指中的新类型字符；如果str[k]为小写，str[k]就是被指中的新类型字符。

下面是使用python3.5实现的代码。

#找到被指的新类型字符
def pointNewChar(str1, k):
    if str1 == None or len(str1) == 0 or k < 0 or k >= len(str1):
        return ""
    uNum = 0
    for i in range(k-1, -1, -1):
        if str1[i].islower():
            break
        uNum += 1

    if uNum & 1 == 1:
        return str1[k-1 : k+1]
    elif str1[k].isupper():
        return str1[k : k+2]
    else:
        return str1[k]


字符串问题---最小包含子串的长度
2017年08月26日 03:36:21
阅读数：152
【题目】

　　给定字符串str1和str2，求str1的子串中含有str2所有字符的最小子串长度。

【举例】

　　str1 = “aabcde”, str2 = “ca”。返回3. 
　　str1 = “12345”, str2 = “344”。返回0.

【基本思路】

　　使用一个哈希表记录str2中每一个字符出现的次数。需要四个变量：left，right表示str1子串str1[left…right]的两边界下标，match表示在子串str1[left…right]中目前一共欠str2多少个字符。minlength记录整个遍历过程中出现的最小的子串长度。初始时，left = right = 0，match = len(str2)，minlength = 系统的最大值。 
　　 
　　遍历str1，先向右扩张right，当遇到str2中的字符是，将map中相应的值 -1，同时match也 -1；如果遇到的不是str2中的字符，将(str1[right]，-1)记录到map中。当match == 0时，说明str1[left…right]已经包含了str2中的所有字符，但是此时的子串长度还不是该子串的最小长度，例如，例1中开始出现两个a，但是第二个a到c的距离才是最小距离。所以接下来还有一个向右扩张left的过程。 
　　 
　　向右扩张left，如果map[str1[left]] < 0，说明此时如果把这个字符捡起来，str1[left…right]中也不会欠str2字符，所以捡起该字符。如果map[str1[left]] == 0，说明一旦捡起该字符，那么str1[left…right]必然会欠str2一个字符，所以此时left扩张终止，此时left到right的值便是一个最小子串。 
　　 
　　令match+1，map[str1[left]]＋1，从left的下一个位置开始，继续扩张right和left寻找下一个最小的子串。整个过程中使用minlength记录最小的子串长度。 
　　 
如果str1的长度为Ｎ，该做法的时间复杂度为O(N)。

下面是使用python3.5实现的代码。

#最小包含子串的长度
def minLength(str1, str2):
    if str1 == None or str2 == None or len(str1) < len(str2):
        return 0
    map = [0 for i in range(256)]
    for i in range(len(str2)):
        map[ord(str2[i])] += 1
    left = 0
    right = 0
    match = len(str2)
    minlength = sys.maxsize
    while right < len(str1):
        map[ord(str1[right])] -= 1
        if map[ord(str1[right])] >= 0:
            match -= 1
        if match == 0:
            while map[ord(str1[left])] < 0:
                map[ord(str1[left])] += 1
            minlength = min(minlength, right - left + 1)
            match += 1
            map[ord(str1[left])] += 1
            left += 1
        right += 1
    return minlength if minlength != sys.maxsize else 0


字符串问题---回文最小分割数
2017年08月27日 13:21:06
阅读数：319
【题目】

　　给定一个字符串str，返回把str全部切成回文子串的最小分割数。

【举例】

　　str = “ABA”，str本身就是回文串，返回0. 
　　str = “ACDCDCDAD”，最少需要切两次变成3个回文子串，所以返回2.

【基本思路】

　　本题是一个经典的动态规划的题目。定义动态规划数组dp，dp[i]的含义是子串str[0…i]至少需要切割几次，才能把str[0…i]全部切成回文子串。那么dp[len-1]就是最后的结果。

从左往右依次计算dp[i]的值，i 初始为0，具体计算过程如下：

1、假设 j 处在 0 到 i 之间，如果str[j…i]是回文串，那么dp[i]的值可能是dp[j-1] + 1，其含义是在str[0…i]上，既然str[j…i]是回文串，那么它可以自己作为一个分割的部分，剩下的部分str[0…j-1]继续做最经济的分割，也就是dp[j-1]的值。

2、根据步骤1的方式，让 j 在 i 到 0 的位置上枚举，那么所有可能中最小值就是dp[i]的值，即dp[i] = min{dp[j-1]+1 (0<= j <= i，且str[j…i]必须是回文串)}。

3、如何快速方便的判断str[j…i]是否为回文串？

　1）定义一个二维数组p，如果p[j][i]为True，表示str[j…i]是回文串，否则不是。在计算dp过程中，希望能够同步、快速的计算出矩阵p。

　2）p[j][i]如果为True，一定来自以下三种情况： 
　　 
　　<1>　str[j][i]由一个字符组成 
　　<2>　str[j][i]由两个字符组成且两个字符相等 
　　<3>　str[j][i]由多个字符组成，str[j] == str[i]且p[j+1][i-1] == True。

　3）在计算dp数组的过程中，位置i是从左向右依次计算的。而对于每一个i来说，又依次从 i 位置向左遍历所有的位置，以此来决策dp[i]。所以对于p[j][i]来说，p[j+1][i-1]一定已经计算过。

从后往前遍历str也是可以的，原理同上，详情见代码，这么做下标理解起来可能更容易一点。

下面是使用python3.5实现的代码。

#回文最小分割数
＃从前往后遍历
def minCut(str1):
    if str1 == None or str1 == "":
        return 0
    N = len(str1)
    p = [[False for i in range(N)] for j in range(N)]
    dp = [0 for i in range(N)]
    for i in range(N):
        dp[i] = sys.maxsize
        for j in range(i, -1, -1):
            if str1[j] == str1[i] and (i-j < 2 or p[j+1][i-1]):
                p[j][i] = True
                dp[i] = min(dp[i], 0 if j-1 == -1 else dp[j-1] + 1)
    return dp[-1]


＃从后往前遍历
def minCut２(str1):
    if str1 == None or str1 == "":
        return 0
    N = len(str1)
    dp = [0 for i in range(N)]
    p = [[False for i in range(N)] for j in range(N)]
    for i in range(N-1, -1, -1):
        dp[i] = sys.maxsize
        for j in range(i, N):
            if str1[i] == str1[j] and (j-i < 2 or p[i+1][j-1]):
                p[i][j] = True
                dp[i] = min(dp[i], 0 if j+1 == N else dp[j+1] + 1)
    return dp[0]

字符串问题---字典树（前缀树）的实现
2017年08月31日 23:30:33
阅读数：157
【题目】

　　字典树又称为前缀树或者Trie树，是处理字符串常用的数据结构。假设组成所有单词的字符仅是‘a’～‘z’，请实现字典树的结构，并包含以下四个主要的功能。

void insert(String word)：添加word，可重复添加
void delete(String word)：删除word，如果word添加过多次，仅删除一次
boolean search(String word)：查询word是否在字典树中
int prefixNumber(String pre)：返回以字符串pre作为前缀的单词数量
【基本思路】

　　字典树介绍。字典树是一种树形结构，优点是利用字符串的公共前缀来节约存储空间。如图，是插入abc, abcd, abd, b, bcd, efg, hik后的字典树。 
　　　　　　　　　这里写图片描述 
　　字典树的基本性质如下： 
　　1.根节点没有字符路径。除根节点外，每一个节点都被一个字符路径找到。 
　　2.从根节点到某一节点，将路径上经过的字符连接起来，为扫过的对应字符串。 
　　3.每个节点向下所有的字符路径上的字符都不同。

下面介绍有关字典树节点的类型，首先定义节点类。

class TrieNode:
    def __init__(self):
        self.path = 0
        self.end = 0 
        self.map = [None for i in range(26)]

　　TrieNode类中，path表示有多少个单词共用这个节点，end表示有多少个单词以这个单词结尾，map是一个哈希表结构，key代表该节点的一条字符路径，value表示字符路径指向的节点，根据题目的说明，map是一个长度为26的数组（相当于一棵有26个孩子的树），在字符种类较多的时候可以使用真实的哈希表结构实现map。下面介绍Trie树类如何实现。

void insert(String word)：假设word的长度为N。从左到右遍历word中的每个字符，并依次从头节点开始根据每一个word[i]，找到下一个节点。如果该节点不存在就新建一个，记为a，令a.path = 1.如果节点存在，记为b，令b + 1。通过最后一个字符找到最后一个节点时记为e，令e.path + 1，e.end + 1

boolean search(String word)：从左到右遍历word中字符，并依次从头节点根据word[i]找到下一个节点。如果找的过程中节点不存在，直接返回False。如果能通过最后一个字符找到最后一个节点，并且该节点的end值不等于0，返回True。如果最后一个节点的end值为0，说明word只是一个前缀，返回False

void delete(String word)：先调用search函数看word在不在树中，如果不在，直接返回。否则，进入如下的操作。从左到右依次遍历word中的字符，并依次从头节点根据word[i]找到下一个节点。在找的过程中，把扫过的每个节点的path值减 1 。如果发现下一个path的值减完为0，直接从当前节点的map中删除后续的所有路径，返回即可。如果扫到最后一个节点。记为e，令e.path，e.end都减1

int prefixNumber(String pre)：和查找操作同理，根据pre不断找到节点，假设最后的节点记为e，返回e.path即可

下面是使用python3.5实现的代码。

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word):
        if word == None:
            return
        node = self.root
        for i in word:
            index = ord(i) - ord('a')
            if node.map[index] == None:
                node.map[index] = TrieNode()
            node = node.map[index]
            node.path += 1
        node.end += 1
        print("Inset successful")

    def search(self, word):
        if word == None:
            return False
        node = self.root
        for i in word:
            index = ord(i) - ord('a')
            if node.map[index] == None:
                return False
            node = node.map[index]
        return True if node.end != 0 else False

    def delete(self, word):
        if self.search(word):
            node = self.root
            for i in word:
                index = ord(i) - ord('a')
                node.map[index].path -= 1
                if node.map[index].path == 0:
                    node.map[index] = None
                    return
                node = node.map[index]
            node.end -= 1

    def prefixNumber(self, pre):
        if pre == None:
            return
        node = self.root
        for i in pre:
            index = ord(i) - ord('a')
            if node.map[index] == None:
                return 0
            node = node.map[index]
        return node.path
